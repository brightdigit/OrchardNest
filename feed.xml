<?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
    <link href="https://nshipster.com/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://nshipster.com/" rel="alternate" type="text/html" hreflang="en-US"/>
    <updated>2020-06-27T07:55:36-07:00</updated>
    <id>https://nshipster.com/feed.xml</id>
    <title>NSHipster</title>
    <subtitle>NSHipster is a journal of the overlooked bits in Objective-C, Swift, and Cocoa. Updated weekly.
    </subtitle>
    <author>
      <name>Mattt</name>
      <email>mattt@nshipster.com</email>
      <uri>https://nshipster.com/authors/mattt</uri>
    </author>
    <entry>
      <title type="html">WWDC 2020</title>
      <link href="https://nshipster.com/wwdc-2020/" rel="alternate" type="text/html" title="WWDC 2020" />
      <published>2020-06-26T00:00:00-07:00</published>
      <updated>2020-06-26T00:00:00-07:00</updated>
      <id>https://nshipster.com/wwdc-2020</id>
      <content type="html" xml:base="https://nshipster.com/wwdc-2020/">
        &lt;p&gt;Like everything else in 2020,
        this year‚Äôs WWDC had to be a little different
        if it was going to happen at all.&lt;/p&gt;
        &lt;p&gt;When Apple first announced that the conference would be fully remote,
        nobody knew what that would look like, exactly.
        What parts of the dubdub experience would be kept in this new format?
        What details would be lost in translation?
        Could they actually pull it off?&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;For context:
        Apple live-streamed its first keynote in 2013,
        and technical sessions in 2015.
        Attendees of &lt;a href=&quot;http://bslabs.net/2018/05/28/wwdc-1997-videos/&quot; rel=&quot;noopener noreferrer&quot;&gt;WWDC 1997&lt;/a&gt; could obtain a collection of CDs
        with video recordings of sessions ‚Äî
        a far cry from the VHS tape for &lt;a href=&quot;http://bslabs.net/2020/06/19/wwdc-1990/&quot; rel=&quot;noopener noreferrer&quot;&gt;WWDC 1990&lt;/a&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;As it turns out,
        going fully remote wasn‚Äôt merely good enough ‚Äî
        it was, in many ways, superior to the original thing.
        There‚Äôs a lot to like about the new format.&lt;/p&gt;
        &lt;p&gt;The videos are well-produced,
        and let each presenter‚Äôs personality really shine.
        Everybody looks and sounds great.&lt;/p&gt;
        &lt;p&gt;Sessions are tight and well-paced.
        Rather than stretching or cramming content into a fixed time slot,
        they‚Äôre as long as they need to be.
        And thanks to this more digestible format,
        we‚Äôre starting to see WWDC clips being shared around,
        which is new and refreshing.&lt;/p&gt;
        &lt;p&gt;To be honest,
        it‚Äôs hard to imagine ever going back to a physical conference.&lt;/p&gt;
        &lt;p&gt;However,
        as someone who had the privilege of attending WWDC in years past,
        there are things I‚Äôm going to miss
        (and some that I decidedly won‚Äôt).&lt;/p&gt;
        &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;ü•∞&lt;/th&gt;
        &lt;th&gt;üò´&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;td&gt;Refrigerators stocked with Odwalla smoothies&lt;/td&gt;
        &lt;td&gt;Trying to download the latest Xcode beta over hotel internet&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Lunchtime sessions&lt;/td&gt;
        &lt;td&gt;Eating lunch at or around Moscone&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;WWDC track jackets saving the lives of first-time attendees from the cold of San Francisco summer&lt;/td&gt;
        &lt;td&gt;Being in San Francisco, generally&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Eating burritos on the terrace of McEnery Convention Center during WWDC check-in&lt;/td&gt;
        &lt;td&gt;Being in San Jose, generally&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Guessing who would be playing at Bash this year&lt;/td&gt;
        &lt;td&gt;Hearing the same handful of songs on repeat before and after every session
        (&lt;a href=&quot;https://music.apple.com/us/album/animal/1471689800?i=1471689803&quot; rel=&quot;noopener noreferrer&quot;&gt;this song&lt;/a&gt; in particular) &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;
        &lt;details&gt;
        &lt;summary&gt;Watching Apple executives dance at Bash&lt;/summary&gt;
        &lt;video preload=&quot;none&quot; width=&quot;636&quot; height=&quot;290&quot; controls&gt;
        &lt;source src=&quot;/assets/wwdc-2020-apple-executives-dancing-27951f1ebe1a00a99aa0fcf2872c92901996ecb57a19ed8756c63bf49862eff8.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/source&gt;
        &lt;/video&gt;
        &lt;/details&gt;
        &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Talking to people as you wait in line for the keynote on Monday morning&lt;/td&gt;
        &lt;td&gt;Waking up late and having to settle for watching from the overflow room&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Leaving at the end of the week with a mix of hope, fear, and inspiration &lt;sup&gt;*&lt;/sup&gt;
        &lt;/td&gt;
        &lt;td&gt;Being sick for the next week with dubdub flu&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; I‚Äôd like to hold on this last point for a moment.&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
        &lt;p&gt;In the &lt;em&gt;Before Times&lt;/em&gt;,
        many of us traveled far from home to attend WWDC.
        There was a physical and temporal delineation
        between life before, during, and after the conference.
        Flying out of &lt;abbr&gt;SFO&lt;/abbr&gt;, &lt;abbr&gt;SJC&lt;/abbr&gt;, or &lt;abbr&gt;OAK&lt;/abbr&gt;,
        you escaped Apple‚Äôs &lt;a href=&quot;https://www.folklore.org/StoryView.py?story=Reality_Distortion_Field.txt&quot; rel=&quot;noopener noreferrer&quot;&gt;‚Äúreality distortion field‚Äù&lt;/a&gt; 
        and its surrounding echo chamber.
        You returned to your normal life.&lt;/p&gt;
        &lt;p&gt;This year? Not so much.&lt;/p&gt;
        &lt;p&gt;WWDC 2020 was just another week in this bizarre existence amidst this pandemic.
        Not only is there no escape from the ‚Äúreality distortion field‚Äù,
        there isn‚Äôt even a ‚Äúnormal life‚Äù for us to leave or return to.&lt;/p&gt;
        &lt;p&gt;So here we are,
        filled with anxious excitement and fear;
        our corporeal forms replaced by
        Memoji floating in a black, digital void
        lit only by the screens of our soon-to-be-obsolete MacBooks Pro.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/wwdc-2020-banner-5aea233c44b90d0f9280640c06830378872173fb06542be6737deb37ff923f79.jpg&quot; integrity=&quot;sha256-WuojPES5DQ+SgGQMBoMDeIchc/sGVCvmc33rN/+SP3k=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;excitement&quot; href=&quot;#excitement&quot;&gt;&lt;/a&gt;Excitement&lt;/h2&gt;
        &lt;p&gt;I don‚Äôt have a real sense of how everything went over this year.
        There wasn‚Äôt any applause (or heckling) at this year‚Äôs keynote
        to gauge the temperature in the room.
        There were no parties to overhear shop talk and hot takes.
        There was no line for lunch
        to make small talk with a fellow attendee.&lt;/p&gt;
        &lt;p&gt;But if &lt;a href=&quot;https://twitter.com/hashtag/WWDC20&quot; rel=&quot;noopener noreferrer&quot;&gt;Twitter&lt;/a&gt; is anything to go on,
        my overall impression is that everyone is really &lt;em&gt;excited&lt;/em&gt;.&lt;/p&gt;
        &lt;p&gt;Which is fine. I get it.&lt;/p&gt;
        &lt;p&gt;But it should come as no surprise that things announced at WWDC are exciting ‚Äî
        that‚Äôs the whole point of having a developer conference in the first place.
        Apple has the best marketing in the world,
        and WWDC is Apple‚Äôs way of marketing to us.&lt;/p&gt;
        &lt;p&gt;Here‚Äôs the thing about excitement:
        It‚Äôs kryptonite to developers.&lt;/p&gt;
        &lt;p&gt;Excitement messes with our ability to focus on one thing,
        which is already a big struggle for a lot of us (myself included).
        When you‚Äôre excited,
        it‚Äôs almost impossible to get anything done.&lt;/p&gt;
        &lt;p&gt;There are plenty of voices in the community who are echoing this excitement.
        I can‚Äôt add anything to that discussion.
        And besides,
        that‚Äôs not really where my head‚Äôs at right now.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;trivial-pursuit&quot; href=&quot;#trivial-pursuit&quot;&gt;&lt;/a&gt;Trivial Pursuit&lt;/h3&gt;
        &lt;p&gt;I briefly considered reviving the &lt;a href=&quot;/nshipster-quiz-2/&quot;&gt;NSHipster Quiz&lt;/a&gt;
        for WWDC 2020,
        but it didn‚Äôt feel right.
        With everything going on in the world,
        Apple trivia just isn‚Äôt where my head or heart are right now.&lt;/p&gt;
        &lt;p&gt;To give you a sense of what I mean, here‚Äôs what I had for Round 3,
        whose theme was inspired by &lt;a href=&quot;https://www.cs.virginia.edu/~robins/YouAndYourResearch.html&quot; rel=&quot;noopener noreferrer&quot;&gt;Richard Hamming&lt;/a&gt;:&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;strong&gt;Question 1.&lt;/strong&gt;&lt;/dt&gt;
        &lt;dd&gt;What are the important problems of your field?&lt;/dd&gt;
        &lt;dt&gt;&lt;strong&gt;Question 2.&lt;/strong&gt;&lt;/dt&gt;
        &lt;dd&gt;What important problems are you working on?&lt;/dd&gt;
        &lt;dt&gt;&lt;strong&gt;Question 3.&lt;/strong&gt;&lt;/dt&gt;
        &lt;dd&gt;If what you are doing is not important,
        why are working on it?&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;I think I made the right call by not doing a quiz this year.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;temperance&quot; href=&quot;#temperance&quot;&gt;&lt;/a&gt;Temperance&lt;/h2&gt;
        &lt;p&gt;If you‚Äôre serious about solving a problem,
        you owe it to yourself to temper any excitement
        that distracts you from making real progress.&lt;/p&gt;
        &lt;p&gt;In last year‚Äôs write-up for &lt;a href=&quot;/wwdc-2019/&quot;&gt;WWDC 2019&lt;/a&gt;,
        I concluded with the following,
        as a counterpoint to the conference‚Äôs theme of &lt;code&gt;#mindblown&lt;/code&gt; ü§Ø:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Taking care of yourself ‚Äî
        sleeping enough, eating right, exercising regularly ‚Äî
        will do more to improve your productivity
        than any language or framework out there.
        Your ability to communicate and collaborate with others
        will always be a better predictor of success
        than your choice of technology stack.
        Your relationships with others
        are the most significant factors of success and happiness in life.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;I stand by this advice, boring as it may be.&lt;/p&gt;
        &lt;p&gt;It‚Äôs been an exciting week,
        so take a moment to collect yourself.
        Go on a walk. Take a hike. (Be safe about it.)
        Do whatever you need to break free of the ‚Äúreality distortion field‚Äù.
        Once you do, you‚Äôll have the necessary distance to determine
        what new technologies you should pay attention to
        and what you can ignore for now.&lt;/p&gt;
        &lt;p&gt;We have a lot of work ahead of us.&lt;/p&gt;
        &lt;script src=&quot;/assets/articles/wwdc-2020-a6b4ce561899db53330ae1cf9aae3267bc6250482f7bb03cd17b2e46497c5656.js&quot; type=&quot;text/javascript&quot; integrity=&quot;sha256-prTOVhiZ21MzCuHPmq4yZ7xiUEgve7A80XsuRkl8VlY=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Miscellaneous" />
      <summary type="html">&lt;p&gt;A brief remark about the excitement of Apple‚Äôs annual developer conference.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Language Server Protocol</title>
      <link href="https://nshipster.com/language-server-protocol/" rel="alternate" type="text/html" title="Language Server Protocol" />
      <published>2018-11-05T00:00:00-08:00</published>
      <updated>2020-05-07T00:00:00-07:00</updated>
      <id>https://nshipster.com/language-server-protocol</id>
      <content type="html" xml:base="https://nshipster.com/language-server-protocol/">
        &lt;p&gt;In October 2018,
        Apple &lt;a href=&quot;https://forums.swift.org/t/new-lsp-language-service-supporting-swift-and-c-family-languages-for-any-editor-and-platform/17024&quot; rel=&quot;noopener noreferrer&quot;&gt;announced on the Swift.org forums&lt;/a&gt;
        that it was starting work to adopt
        the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; rel=&quot;noopener noreferrer&quot;&gt;Language Server Protocol&lt;/a&gt;
        (&lt;abbr title=&quot;Language Server Protocol&quot;&gt;LSP&lt;/abbr&gt;)
        for Swift and C languages.&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;At Apple we are making it a priority
        to support high-quality tooling for all Swift developers,
        including those working on non-Apple platforms.
        We want to collaborate with the open-source community
        and focus our efforts on building common infrastructure
        that can be shared by Xcode and other editors and platforms.
        To that end, [ ‚Ä¶ ] we‚Äôve chosen to adopt LSP.&lt;/p&gt;
        &lt;p&gt;&lt;cite&gt;Argyrios Kyrtzidis, October 15&lt;sup&gt;th&lt;/sup&gt;, 2018&lt;/cite&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;&lt;strong&gt;This is arguably the most important decision Apple has made for Swift
        since releasing the language as open source in 2014.&lt;/strong&gt;
        It‚Äôs a big deal for app developers,
        and it‚Äôs an even bigger deal for Swift developers on other platforms.&lt;/p&gt;
        &lt;p&gt;To understand why,
        this week‚Äôs article will take a look at
        what problem the Language Server Protocol solves,
        how it works,
        and what its long-term impacts may be.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;:
        GitHub recently announced
        &lt;a href=&quot;https://github.com/features/codespaces/&quot; rel=&quot;noopener noreferrer&quot;&gt;Codespaces&lt;/a&gt;,
        an upcoming feature that promises
        &lt;em&gt;‚Äúthe full Visual Studio Code experience without leaving GitHub‚Äù&lt;/em&gt;.
        Thanks to Swift‚Äôs support for LSP,
        we‚Äôll soon be able to edit Swift code ‚Äî
        syntax highlighting, autocompletion, and all ‚Äî
        directly from the browser.&lt;/p&gt;
        &lt;p&gt;Why wait for the
        &lt;a href=&quot;https://twitter.com/jon_prosser/status/1252187152831692800&quot; rel=&quot;noopener noreferrer&quot;&gt;rumored&lt;/a&gt;
        announcement of Xcode for iPad at &lt;a href=&quot;https://developer.apple.com/wwdc20/&quot; rel=&quot;noopener noreferrer&quot;&gt;WWDC&lt;/a&gt;?
        Codespaces turns any iPad into a
        &lt;a href=&quot;https://twitter.com/notdetails/status/1258120708212785154&quot; rel=&quot;noopener noreferrer&quot;&gt;full-fledged development environment&lt;/a&gt;!&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;Imagine a grid
        with each row representing a different programming language
        (Swift, JavaScript, Ruby, Python, etc.)
        and each column representing a different code editor
        (Xcode, Visual Studio, Vim, Atom, etc.),
        such that each cell represents
        the level of support that a particular editor has for a language.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/lsp-languages-times-editors-b9a398af0dea85f2ad6dcf5412fbcb451a43bc90091d5e3ab3b1140da9926b3e.svg&quot; integrity=&quot;sha256-uaOYrw3qhfKtbc9UEvvLRRpDvJAJHV46s7EUDamSaz4=&quot; crossorigin=&quot;anonymous&quot; role=&quot;img&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;p&gt;Up until recently,
        what you‚Äôd find was a patchwork of compatibility
        across the various combinations.
        Some editors offered deep integration with a few languages
        and little to no support for anything else,
        whereas other editors aimed to be general-purpose
        with at least a modicum of support for many languages.
        (The term &lt;abbr title=&quot;Integrated Development Environment&quot;&gt;IDE&lt;/abbr&gt;
        is often used to describe the former.)&lt;/p&gt;
        &lt;p&gt;Case in point:
        &lt;em&gt;You‚Äôd be stubborn not to use Xcode for app development
        and foolish to use it for anything else.&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;For an editor to have better support for a particular language,
        it needs to write integration code ‚Äî
        either directly in the code base or via a plugin system.
        Due to implementation differences across languages and editors,
        improvements to, say,
        Ruby support in Vim
        wouldn‚Äôt translate into better support for Python,
        nor could they be applied to make Ruby work better in Atom.
        The end result: inconsistent support across technologies
        and a lot of wasted effort.&lt;/p&gt;
        &lt;p&gt;The situation we described
        is often referred to as an &lt;dfn&gt;M √ó N problem&lt;/dfn&gt;,
        where the number of integrations is the &lt;em&gt;product&lt;/em&gt; of
        &lt;code&gt;M&lt;/code&gt; editors and &lt;code&gt;N&lt;/code&gt; languages.
        What the Language Server Protocol does is change this M √ó N problem
        into a &lt;dfn&gt;M + N problem&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;Rather than an editor having to implement support for each language,
        it only needs to support the LSP.
        And in doing so, it gets the same level of functionality
        for all languages that support the LSP.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/lsp-languages-plus-editors-904f780fa4a21e89b5b00bfe5fca39795dd54c1c4c67acf3f0fe095aaf09064d.svg&quot; integrity=&quot;sha256-kE94D6SiHom1sAv+X8o5eV3VTBxMZ6zz8P4JWq8JBk0=&quot; crossorigin=&quot;anonymous&quot; role=&quot;img&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;An essay from 2010 by Tomohiro Matsuyama
        entitled &lt;a href=&quot;https://tkf.github.io/2013/06/04/Emacs-is-dead.html&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúEmacs „ÅØÊ≠ª„Çì„Å†‚Äù (&lt;em&gt;‚ÄúEmacs is Dead‚Äù&lt;/em&gt;)&lt;/a&gt;
        offers a nice encapsulation of this problem.
        Describing the limitations of Emacs‚Äô scripting language
        (no multi-threading, few low-level APIs, and a small user base)
        Matsuyama argues that the preferred approach to writing a plugin
        should be to interface with an external program
        rather than implement something natively.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Language Server Protocol provides a common set of functionality
        for supported languages, including:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Syntax Highlighting&lt;/li&gt;
        &lt;li&gt;Automatic Formatting&lt;/li&gt;
        &lt;li&gt;Autocomplete&lt;/li&gt;
        &lt;li&gt;Syntax&lt;/li&gt;
        &lt;li&gt;Tooltips&lt;/li&gt;
        &lt;li&gt;Inline Diagnostics&lt;/li&gt;
        &lt;li&gt;Jump to Definition&lt;/li&gt;
        &lt;li&gt;Find References in Project&lt;/li&gt;
        &lt;li&gt;Advanced Text and Symbol Search&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Rather than reinventing the wheel for each new technology,
        tools and editors can invest in better usability
        and more advanced functionality.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;how-language-server-protocol-works&quot; href=&quot;#how-language-server-protocol-works&quot;&gt;&lt;/a&gt;How Language Server Protocol Works&lt;/h2&gt;
        &lt;p&gt;If you‚Äôre an iOS developer,
        you may be most familiar with
        the terms &lt;dfn&gt;server&lt;/dfn&gt; and &lt;dfn&gt;protocol&lt;/dfn&gt;
        in the sense of communicating with web applications
        in JSON format via HTTP.
        This actually isn‚Äôt too far off from how the Language Server Protocol works.&lt;/p&gt;
        &lt;p&gt;In the case of LSP,
        the &lt;em&gt;client&lt;/em&gt; refers to the editor ‚Äî
        or more generally, the tool ‚Äî
        and the &lt;em&gt;server&lt;/em&gt; refers to
        an external program run locally in a separate process.&lt;/p&gt;
        &lt;p&gt;As for the &lt;em&gt;protocol&lt;/em&gt; itself,
        LSP resembles a simplified version of HTTP:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Each message consists of
        a header part and a content part.&lt;/li&gt;
        &lt;li&gt;The header part has a required &lt;code&gt;Content-Length&lt;/code&gt; field
        containing the size of the content part in bytes,
        and an optional &lt;code&gt;Content-Type&lt;/code&gt; field
        (&lt;code&gt;application/vscode-jsonrpc; charset=utf-8&lt;/code&gt; by default)&lt;/li&gt;
        &lt;li&gt;The content part uses &lt;a href=&quot;https://www.jsonrpc.org/specification&quot; rel=&quot;noopener noreferrer&quot;&gt;JSON-RPC&lt;/a&gt;
        to describe the structure of requests, responses, and notifications.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Whenever something happens in the tool,
        such as the user jumping to the definition of a symbol,
        the tool sends a request to the server.
        The server receives that request
        and then returns an appropriate response.&lt;/p&gt;
        &lt;p&gt;For example,
        imagine that a user opens the following Swift code
        in an Xcode-like editor that supported the Language Server Protocol:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;When the user &lt;kbd&gt;‚åò&lt;/kbd&gt;-clicks the symbol &lt;code&gt;Parent&lt;/code&gt;
        in the inheritance clause on line 2,
        the editor jumps to the definition of the &lt;code&gt;Parent&lt;/code&gt; class on line 1.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/lsp-jump-to-definition-f76ae15d897ab30706c101e7300cd299ad97f6b910ed79ce4890351c2805ae56.gif&quot; integrity=&quot;sha256-92rhXYl6swcGwQHnMAzSma2X9rkQ7XnOSJA1HCgFrlY=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;p&gt;Here‚Äôs how LSP enables this interaction behind the scenes:&lt;/p&gt;
        &lt;p&gt;First,
        when the user opens the Swift code,
        the editor launches its Swift language server in a separate process,
        if it isn‚Äôt running already,
        and performs any additional setup.&lt;/p&gt;
        &lt;p&gt;When the user executes the ‚Äújump to definition‚Äù command,
        the editor sends the following request to its Swift language server:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;JSON&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;jsonrpc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&lt;wbr&gt;&lt;/wbr&gt;Document/definition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text&lt;wbr&gt;&lt;/wbr&gt;Document&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file:///Users/NSHipster/Example.swift&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;position&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;character&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Upon receiving this request,
        the Swift language server uses a compiler tool like
        &lt;a href=&quot;https://github.com/apple/swift/tree/master/tools/SourceKit&quot; rel=&quot;noopener noreferrer&quot;&gt;SourceKit&lt;/a&gt;
        to identify the corresponding code entity
        and find the location of its declaration on the preceding line.
        The language server then responds with the following message:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;JSON&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;jsonrpc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file:///Users/NSHipster/Example.swift&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;character&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;character&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Finally,
        the editor navigates to the file
        (which, in this case, is already open),
        moves the cursor to that range,
        and highlights the token.&lt;/p&gt;
        &lt;p&gt;The beauty of this approach is that the editor did all of this
        without knowing anything about the Swift programming language
        other than that &lt;code&gt;.swift&lt;/code&gt; files are associated with Swift code.
        All the editor needs to do
        is talk to the language server and update the UI.
        And knowing how to do that,
        the editor can follow the same procedure
        to facilitate this interaction
        for code written in any language with a language server implementation.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;language-server-protocol-support-in-clang-llvm&quot; href=&quot;#language-server-protocol-support-in-clang-llvm&quot;&gt;&lt;/a&gt;Language Server Protocol Support in Clang / LLVM&lt;/h2&gt;
        &lt;p&gt;If the &lt;em&gt;M + N&lt;/em&gt; diagram from before looks familiar,
        it might be because it‚Äôs the same approach taken by LLVM.&lt;/p&gt;
        &lt;p&gt;At the core of LLVM is an intermediate representation (IR).
        Supported languages generate IR using a &lt;dfn&gt;compiler frontend&lt;/dfn&gt;,
        and that IR can generate machine code
        for any platform supported by a &lt;dfn&gt;compiler backend&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/lsp-llvm-ir-34a10847cbe6519370c1b5e92def8f82b2ebde71aa2440c88880283bd5cbaf0a.svg&quot; integrity=&quot;sha256-NKEIR8vmUZNwwbXpLe+PgrLr3nGqJEDIiIAoO9XLrwo=&quot; crossorigin=&quot;anonymous&quot; role=&quot;img&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;If you‚Äôre curious to learn more about how Swift code is compiled,
        check out &lt;a href=&quot;https://nshipster.com/swiftsyntax/&quot;&gt;our article about SwiftSyntax&lt;/a&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;The LLVM compiler frontend for C languages
        is called &lt;a href=&quot;https://clang.llvm.org&quot; rel=&quot;noopener noreferrer&quot;&gt;Clang&lt;/a&gt;.
        It‚Äôs also used by Swift for inter-operability with Objective-C.
        In its recent 5.0.0 release,
        Clang added a new tool called
        &lt;a href=&quot;https://clang.llvm.org/extra/clangd.html&quot; rel=&quot;noopener noreferrer&quot;&gt;Clangd&lt;/a&gt;,
        LLVM‚Äôs implementation for the Language Server Protocol.&lt;/p&gt;
        &lt;p&gt;In April 2018,
        &lt;a href=&quot;http://lists.llvm.org/pipermail/cfe-dev/2018-April/057668.html&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple announced to the LLVM mailing list&lt;/a&gt;
        that it was switching the focus of its development efforts from
        &lt;a href=&quot;https://clang.llvm.org/doxygen/group__CINDEX.html&quot; rel=&quot;noopener noreferrer&quot;&gt;libclang&lt;/a&gt;
        to Clangd as the primary way to create interactive tooling.&lt;/p&gt;
        &lt;p&gt;Now you might think, &lt;em&gt;‚ÄúSo what?‚Äù&lt;/em&gt;
        Apple is among the most prominent supporters of the LLVM project ‚Äî
        having, among other things,
        employed the project‚Äôs founder, Chris Lattner, for over a decade.
        Apple‚Äôs decision to switch from one obscure Clang tool to another
        would seem to be an implementation detail (so to speak).&lt;/p&gt;
        &lt;p&gt;What makes this announcement quite interesting
        is that Clangd appears to have been created entirely outside of Apple,
        with significant contributions from Google and other companies.
        This announcement signals a significant shift
        in the direction of tooling development going forward ‚Äî
        something that would be confirmed 6 months later on the Swift.org forums.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;getting-started-with-language-server-protocol&quot; href=&quot;#getting-started-with-language-server-protocol&quot;&gt;&lt;/a&gt;Getting Started with Language Server Protocol&lt;/h2&gt;
        &lt;p&gt;Xcode 11.4 includes &lt;code&gt;sourcekit-lsp&lt;/code&gt; in its default toolchain.
        You can use the &lt;code&gt;xcrun&lt;/code&gt; command
        to get the path to the language server executable:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;xcrun &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; sourcekit-lsp
        &lt;span class=&quot;go&quot;&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/Xcode&lt;wbr&gt;&lt;/wbr&gt;Default.xctoolchain/usr/bin/sourcekit-lsp
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Check out &lt;a href=&quot;/vscode/&quot;&gt;our article about Visual Studio Code&lt;/a&gt;
        to get started with our go-to editors.
        Beyond that,
        the sourcekit-lsp project on GitHub has
        &lt;a href=&quot;https://github.com/NSHipster/sourcekit-lsp/tree/master/Editors#editor-integration&quot; rel=&quot;noopener noreferrer&quot;&gt;instructions for integrating with Sublime Text, Vim, Emacs, and others.&lt;/a&gt;.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;potential-consequences-of-apples-support-of-language-server-protocol&quot; href=&quot;#potential-consequences-of-apples-support-of-language-server-protocol&quot;&gt;&lt;/a&gt;Potential Consequences of Apple‚Äôs Support of Language Server Protocol&lt;/h2&gt;
        &lt;p&gt;It‚Äôll take some time to feel the full impact of these developments,
        but believe me: your patience will be rewarded.
        Here are just a few of what I believe will happen as a result of LSP
        in the coming months and years.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;swift-becomes-more-appealing-as-a-general-purpose-programming-language&quot; href=&quot;#swift-becomes-more-appealing-as-a-general-purpose-programming-language&quot;&gt;&lt;/a&gt;Swift Becomes More Appealing as a General-Purpose Programming Language&lt;/h3&gt;
        &lt;p&gt;Although Swift is used primarily for app development,
        it was designed from the start to be
        a capable general-purpose programming language.
        Between
        &lt;a href=&quot;https://www.tensorflow.org/swift/&quot; rel=&quot;noopener noreferrer&quot;&gt;Swift for TensorFlow&lt;/a&gt;,
        &lt;a href=&quot;https://github.com/apple/swift-nio&quot; rel=&quot;noopener noreferrer&quot;&gt;SwiftNIO&lt;/a&gt;,
        and other projects,
        we‚Äôre just starting to see the promise of
        what Swift can do beyond the App Store.&lt;/p&gt;
        &lt;p&gt;Among the biggest factors holding Swift back from
        mainstream adoption up to this point
        has been its reliance on Xcode.&lt;/p&gt;
        &lt;p&gt;It‚Äôs a lot to ask, say, a web developer or machine learning engineer
        to download Xcode just to try Swift
        when there are so many great alternatives
        with a much lower barrier to entry.
        Support for the Language Server Protocol
        should make it significantly easier for folks outside the Apple ecosystem
        to evaluate Swift with the same, familiar tools they use for everything else.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;xcode-gets-better&quot; href=&quot;#xcode-gets-better&quot;&gt;&lt;/a&gt;Xcode Gets Better&lt;/h3&gt;
        &lt;p&gt;Adopting LSP isn‚Äôt just about making Swift work better in other editors;
        Xcode stands to benefit immensely, as well.&lt;/p&gt;
        &lt;p&gt;Consider &lt;a href=&quot;https://forums.swift.org/t/new-lsp-language-service-supporting-swift-and-c-family-languages-for-any-editor-and-platform/17024/29&quot; rel=&quot;noopener noreferrer&quot;&gt;this forum post&lt;/a&gt;
        from Project Lead for Swift at Apple, Ted Kremenek:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;The LSP service [Argyrios] is describing
        will be functionally more powerful than SourceKit is today.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;LSP is an opportunity for the Xcode team to take a fresh approach to
        Swift integration,
        and to capitalize on all of the improvements to the language and tooling
        in the four years since its 1.0 release.&lt;/p&gt;
        &lt;p&gt;Our first glimpse into this overhauled infrastructure comes by way of
        &lt;a href=&quot;https://github.com/apple/indexstore-db&quot; rel=&quot;noopener noreferrer&quot;&gt;IndexStoreDB&lt;/a&gt;:
        a powerful new API for querying code symbols in Swift projects
        from a &lt;a href=&quot;https://docs.google.com/document/d/1cH2sTpgSnJZCkZtJl1aY-rzy4uGPcrI-6RrUpdATO2Q/&quot; rel=&quot;noopener noreferrer&quot;&gt;Clang index&lt;/a&gt;.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;xcode-eventually-becomes-more-capable&quot; href=&quot;#xcode-eventually-becomes-more-capable&quot;&gt;&lt;/a&gt;Xcode (Eventually) Becomes More Capable&lt;/h3&gt;
        &lt;p&gt;The benefit of LSP isn‚Äôt limited to Swift and Objective-C;
        &lt;a href=&quot;https://forums.swift.org/t/new-lsp-language-service-supporting-swift-and-c-family-languages-for-any-editor-and-platform/17024/33&quot; rel=&quot;noopener noreferrer&quot;&gt;from another post by Argyrios in that thread&lt;/a&gt;:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Getting Xcode to use our new LSP service
        should make it viable to use other LSP services as well,
        and it‚Äôs something that we are interested in,
        but we don‚Äôt have specific plans to announce at this moment.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;The main focus for the current efforts are to improve the story for Swift.
        But once that‚Äôs done, it should be relatively straightforward
        to have those benefits cascade down to other languages with LSP support.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;The architecture of software
        reflects the structure and values of the organizations that create it.
        The converse is true as well, to some extent.&lt;/p&gt;
        &lt;p&gt;By adopting the open Language Server Protocol standard for Xcode,
        Apple is making good on its commitment to the success of Swift
        on platforms outside the Apple ecosystem.
        And I think it‚Äôll work:
        tooling (or lack thereof) is often the key decider
        in which technologies gain mindshare.
        But perhaps more importantly,
        I believe this decision demonstrates an increased willingness within
        (at least some small part of) the company
        for collaboration and transparency.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Open Source" />
      <summary type="html">&lt;p&gt;Apple‚Äôs adoption of LSP is arguably the most important decision they‚Äôve made for Swift since releasing the language as open source in 2014. It‚Äôs a big deal for app developers, and it‚Äôs an even bigger deal for Swift developers on other platforms.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Swift Development with Visual Studio Code</title>
      <link href="https://nshipster.com/vscode/" rel="alternate" type="text/html" title="Swift Development with Visual Studio Code" />
      <published>2018-11-19T00:00:00-08:00</published>
      <updated>2020-05-06T00:00:00-07:00</updated>
      <id>https://nshipster.com/vscode</id>
      <content type="html" xml:base="https://nshipster.com/vscode/">
        &lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com&quot; rel=&quot;noopener noreferrer&quot;&gt;Visual Studio Code (VSCode)&lt;/a&gt;
        is a cross-platform text and source code editor from Microsoft.
        It‚Äôs one of the most exciting open source projects today,
        with regular updates from hundreds of contributors.
        VSCode was among the first tools to support
        &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; rel=&quot;noopener noreferrer&quot;&gt;Language Server Protocol (LSP)&lt;/a&gt;,
        which has played a large part in providing a great developer experience,
        in a variety of languages and technologies.&lt;/p&gt;
        &lt;p&gt;With the &lt;a href=&quot;/language-server-protocol/&quot;&gt;previously announced&lt;/a&gt;
        &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_11_4_beta_release_notes&quot; rel=&quot;noopener noreferrer&quot;&gt;now shipping in Xcode&lt;/a&gt;,
        it‚Äôs a great time to see how this integration works for yourself.&lt;/p&gt;
        &lt;p&gt;This week,
        we‚Äôll walk through the process of how to get started with
        Swift‚Äôs new Language Server Protocol support in Visual Studio Code on macOS.
        If you haven‚Äôt tried writing Swift outside Xcode,
        or are already a VSCode user and new to the language entirely,
        this article will tell you everything you need to know.&lt;/p&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/vscode-banner-18b13775a1ae1b0f2a909b52ba25d5c01cd5833135ef3871483a7dafb4ad5094.png&quot; integrity=&quot;sha256-GLE3daGuGw8qkJtSuiXVwBzVgzE17zhxSDp9r7StUJQ=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;step-0-install-xcode&quot; href=&quot;#step-0-install-xcode&quot;&gt;&lt;/a&gt;Step 0: Install Xcode&lt;/h2&gt;
        &lt;p&gt;If you don‚Äôt already have Xcode installed on your machine,
        open the Terminal app and run the following command:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;xcode-select &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Running this command presents a system prompt.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/xcode-select-window-91c565d561699a8fd8d705fd86517dee45c75a59de458c1f5e7109471d7576c4.png&quot; integrity=&quot;sha256-kcVl1WFpmo/Y1wX9hlF97kXHWlneRYwfXnEJRx11dsQ=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;p&gt;Click the ‚ÄúGet Xcode‚Äù button
        and continue installation on the App Store.&lt;/p&gt;
        &lt;p&gt;You can verify that everything is working as expected
        by running the &lt;code&gt;sourcekit-lsp&lt;/code&gt; command:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;xcrun sourcekit-lsp
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;This command launches a new language server process,
        but don‚Äôt worry if it doesn‚Äôt provide any feedback to &lt;code&gt;STDOUT&lt;/code&gt; ‚Äî
        that means it‚Äôs working as intended.
        Exit the process with an ETX signal (&lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;C&lt;/kbd&gt;).&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;step-1-install-visual-studio-code&quot; href=&quot;#step-1-install-visual-studio-code&quot;&gt;&lt;/a&gt;Step 1: Install Visual Studio Code&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com&quot; rel=&quot;noopener noreferrer&quot;&gt;Download Visual Studio Code&lt;/a&gt;
        and install it to your system Applications folder.
        Open the app and
        &lt;a href=&quot;https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line&quot; rel=&quot;noopener noreferrer&quot;&gt;follow the instructions for launching from the command line&lt;/a&gt;.
        You‚Äôll need to have the &lt;code&gt;code&lt;/code&gt; command accessible from &lt;code&gt;$PATH&lt;/code&gt;
        in order to install the SourceKit-LSP extension later on.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://electronjs.org&quot; rel=&quot;noopener noreferrer&quot;&gt;Electron&lt;/a&gt; apps
        have a reputation for being big and slow,
        but don‚Äôt let that stop you from giving VSCode a try ‚Äî
        its performance and memory footprint are comparable to a native app.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;step-2-install-node-and-npm&quot; href=&quot;#step-2-install-node-and-npm&quot;&gt;&lt;/a&gt;Step 2: Install Node and NPM&lt;/h2&gt;
        &lt;p&gt;VSCode extensions are written in JavaScript / TypeScript.
        If you‚Äôre not already set up for JS development,
        you can download Node (a JavaScript run-time for outside the browser)&lt;br&gt;
        and npm (a package manager for Node)
        with &lt;a href=&quot;https://brew.sh&quot; rel=&quot;noopener noreferrer&quot;&gt;Homebrew&lt;/a&gt; using the following commands
        or manually by &lt;a href=&quot;https://www.npmjs.com/get-npm&quot; rel=&quot;noopener noreferrer&quot;&gt;following these instructions&lt;/a&gt;:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;node
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;To verify that you have a working installation,
        run the following command:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;npm &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
        &lt;span class=&quot;go&quot;&gt;6.13.4
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;step-3-build-and-install-sourcekit-lsp-extension-for-visual-studio-code&quot; href=&quot;#step-3-build-and-install-sourcekit-lsp-extension-for-visual-studio-code&quot;&gt;&lt;/a&gt;Step 3: Build and Install SourceKit-LSP Extension for Visual Studio Code&lt;/h2&gt;
        &lt;p&gt;From the command line,
        clone the &lt;a href=&quot;https://github.com/apple/sourcekit-lsp&quot; rel=&quot;noopener noreferrer&quot;&gt;sourcekit-lsp repository&lt;/a&gt;
        and navigate to &lt;code&gt;Editors/vscode&lt;/code&gt; in the resulting directory.
        Use &lt;code&gt;npm&lt;/code&gt; to build the extension
        and then use the &lt;code&gt;code&lt;/code&gt; command to install it:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git clone https://github.com/apple/sourcekit-lsp.git
        &lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sourcekit-lsp/Editors/vscode/
        &lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;npm run create&lt;wbr&gt;&lt;/wbr&gt;Dev&lt;wbr&gt;&lt;/wbr&gt;Package
        &lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;code &lt;span class=&quot;nt&quot;&gt;--install-extension&lt;/span&gt; out/sourcekit-lsp-vscode-dev.vsix
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Now launch (or relaunch) VSCode and open a Swift project,
        such as &lt;a href=&quot;https://github.com/flight-school/money&quot; rel=&quot;noopener noreferrer&quot;&gt;this one&lt;/a&gt;,
        and test out Language Server Protocol support for Swift.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/vscode-swift-lsp-screenshot-a8cf1610215350898964b506d33d8ee7285b5ce6121eb743fbc1ddefdffadc07.png&quot; integrity=&quot;sha256-qM8WECFTUImJZLUG0z2O5yhbXOYSHrdD+8Hd79/63Ac=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;To get the full experience of working with Swift from VSCode,
        we recommend that you also check out
        the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint&quot; rel=&quot;noopener noreferrer&quot;&gt;Swift Lint extension&lt;/a&gt;
        (for real-time style and convention diagnostics).&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;So there you have it ‚Äî
        the makings of a first-class Swift development experience outside of Xcode.&lt;/p&gt;
        &lt;p&gt;And with GitHub‚Äôs recent announcement of
        &lt;a href=&quot;https://github.com/features/codespaces/&quot; rel=&quot;noopener noreferrer&quot;&gt;Codespaces&lt;/a&gt;,
        that future may be coming sooner than we once thought.
        Thanks to Swift‚Äôs support for
        &lt;a href=&quot;/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;,
        we‚Äôll soon be able to edit Swift code ‚Äî
        syntax highlighting, autocompletion, and all ‚Äî
        directly from the browser.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Miscellaneous" />
      <summary type="html">&lt;p&gt;VSCode is a cross-platform text and source code editor from Microsoft, and among the first tools to support Language Server Protocol. With LSP for Swift now shipping in Xcode, it‚Äôs a great time to see how this integration works for yourself.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Contact Tracing</title>
      <link href="https://nshipster.com/contact-tracing/" rel="alternate" type="text/html" title="Contact Tracing" />
      <published>2020-04-13T00:00:00-07:00</published>
      <updated>2020-04-29T00:00:00-07:00</updated>
      <id>https://nshipster.com/contact-tracing</id>
      <content type="html" xml:base="https://nshipster.com/contact-tracing/">
        &lt;blockquote&gt;
        &lt;p&gt;An ounce of prevention is worth a pound of cure.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Early intervention is among the most effective strategies for treating illnesses.
        This is true not only for the human body, for society as a whole.
        That‚Äôs why public health officials use contact tracing
        as their first line of defense against
        the spread of infectious disease in a population.&lt;/p&gt;
        &lt;p&gt;We‚Äôre hearing a lot about contact tracing these days,
        but the technique has been used for decades.
        What‚Äôs changed is that
        thanks to the ubiquity of personal electronic devices,
        we can automate what was ‚Äî up until now ‚Äî a labor-intensive, manual process.
        Much like how ‚Äúcomputer‚Äù used to be a job title held by humans,
        the role of ‚Äúcontact tracer‚Äù may soon be filled primarily by apps.&lt;/p&gt;
        &lt;p&gt;On April 10th,
        Apple and Google &lt;a href=&quot;https://www.apple.com/newsroom/2020/04/apple-and-google-partner-on-covid-19-contact-tracing-technology/&quot; rel=&quot;noopener noreferrer&quot;&gt;announced&lt;/a&gt; a joint initiative
        to deploy contact tracing functionality
        to the billions of devices running iOS or Android
        in the coming months.
        As part of this announcement,
        the companies shared draft specifications for the
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-CryptographySpecificationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;cryptography&lt;/a&gt;,
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-BluetoothSpecificationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;hardware&lt;/a&gt;,
        and
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-FrameworkDocumentationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;software&lt;/a&gt;
        involved in their proposed solution.&lt;/p&gt;
        &lt;p&gt;In this article,
        we‚Äôll take a first look at these specifications ‚Äî
        particularly Apple‚Äôs proposed &lt;code&gt;Exposure&lt;wbr&gt;&lt;/wbr&gt;Notification&lt;/code&gt; framework ‚Äî
        and use what we‚Äôve learned to anticipate what
        this will all look like in practice.&lt;/p&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;On April 29th,
        Apple released iOS 13.5 beta 1,
        which includes the first public release of the 
        &lt;code&gt;Exposure&lt;wbr&gt;&lt;/wbr&gt;Notification&lt;/code&gt; (previously &lt;code&gt;Contact&lt;wbr&gt;&lt;/wbr&gt;Tracing&lt;/code&gt;) framework.
        The content in this article has been updated to reflect these changes.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;what-is-contact-tracing&quot; href=&quot;#what-is-contact-tracing&quot;&gt;&lt;/a&gt;What is contact tracing?&lt;/h2&gt;
        &lt;p&gt;&lt;dfn&gt;Contact tracing&lt;/dfn&gt; is a technique used by public health officials
        to identify people who are exposed to an infectious disease
        in order to slow the spread of that illness within a population.&lt;/p&gt;
        &lt;p&gt;When a patient is admitted to a hospital
        and diagnosed with a new, communicable disease,
        they‚Äôre interviewed by health workers
        to learn who they‚Äôve interacted recently.
        Any contacts whose interactions with the patient are then evaluated,
        and if they‚Äôre diagnosed with the disease,
        the process repeats with their known, recent contacts.&lt;/p&gt;
        &lt;p&gt;Contact tracing disrupts the chain of transmission.
        It gives people the opportunity to isolate themselves before infecting others
        and to seek treatment before they present symptoms.
        It also allows decision-makers to make more informed
        recommendations and policy decisions about additional measures to take.&lt;/p&gt;
        &lt;p&gt;If you start early and act quickly,
        contact tracing gives you a fighting chance of containing an outbreak
        before it gets out of hand.&lt;/p&gt;
        &lt;p&gt;Unfortunately, we weren‚Äôt so lucky this time around.&lt;/p&gt;
        &lt;p&gt;With over a million confirmed cases of &lt;abbr&gt;COVID-19&lt;/abbr&gt; worldwide,
        many regions are well past the point where contact tracing is practical.
        But that‚Äôs not to say that it can‚Äôt play an essential role
        in the coming weeks and months.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;only-apple-and-google-can-do-this&quot; href=&quot;#only-apple-and-google-can-do-this&quot;&gt;&lt;/a&gt;‚ÄúOnly Apple &lt;ins&gt;(and Google)&lt;/ins&gt; can do this.‚Äù&lt;/h2&gt;
        &lt;p&gt;Since the outbreak,
        various &lt;a href=&quot;https://www.pepp-pt.org&quot; rel=&quot;noopener noreferrer&quot;&gt;governments&lt;/a&gt;
        and &lt;a href=&quot;https://github.com/DP-3T/documents&quot; rel=&quot;noopener noreferrer&quot;&gt;academics&lt;/a&gt;
        have proposed standards for contact tracing.
        But the most significant development so far came yesterday
        with Apple and Google‚Äôs announcement of a joint initiative.&lt;/p&gt;
        &lt;p&gt;According to the
        &lt;abbr title=&quot;United Kingdom National Health Service&quot;&gt;NHS&lt;/abbr&gt;,
        around 60% of adults in a population
        would need to participate in order for digital contact tracing to be effective.
        Researchers from the aforementioned institutions have noted
        that the limits imposed by iOS on 3rd-party apps
        make this level of participation unlikely.&lt;/p&gt;
        &lt;p&gt;On the one hand,
        it feels weird to congratulate Apple for stepping in
        to solve a problem it created in the first place.
        But we can all agree that this announcement
        is something to celebrate.
        It‚Äôs no exaggeration to say that
        this wouldn‚Äôt be possible without their help.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;what-are-apple-and-google-proposing-as-a-solution&quot; href=&quot;#what-are-apple-and-google-proposing-as-a-solution&quot;&gt;&lt;/a&gt;What are Apple and Google proposing as a solution?&lt;/h2&gt;
        &lt;p&gt;At a high level,
        Apple and Google are proposing a common standard
        for how personal electronic devices (phones, tablets, watches)
        can automate the process of contact tracing.&lt;/p&gt;
        &lt;p&gt;Instead of health workers chasing down contacts on the phone ‚Äî
        a process that can take hours, or even days ‚Äî
        the proposed system could identify every recent contact
        and notify all of them within moments of a confirmed, positive diagnosis.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://blog.google/documents/57/Overview_of_COVID-19_Contact_Tracing_Using_BLE.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;This infographic&lt;/a&gt;
        from Google‚Äôs blog post announcing the partnership
        provides a nice explanation of the technologies involved.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Apple‚Äôs CEO, Tim Cook, promises that
        &lt;a href=&quot;https://twitter.com/tim_cook/status/1248657931433693184&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúContact tracing can help slow the spread of COVID-19 and can be done without compromising user privacy.‚Äù&lt;/a&gt;.
        The specifications accompanying the announcement
        show how that‚Äôs possible.&lt;/p&gt;
        &lt;p&gt;Let‚Äôs take them in turn,
        starting with
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-CryptographySpecificationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;cryptography&lt;/a&gt; (key derivation &amp;amp; rotation),
        followed by
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-BluetoothSpecificationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;hardware&lt;/a&gt; (Bluetooth),
        and
        &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-FrameworkDocumentationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;software&lt;/a&gt; (app)
        components.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;cryptography&quot; href=&quot;#cryptography&quot;&gt;&lt;/a&gt;Cryptography&lt;/h3&gt;
        &lt;p&gt;When you install an app and open it for the first time,
        the Exposure Notification framework displays
        a dialog requesting permission
        to enable contact tracing on the device.&lt;/p&gt;
        &lt;p&gt;If the user accepts,
        the framework generates a 32-byte cryptographic random number
        to serve as the device‚Äôs &lt;dfn&gt;Tracing Key&lt;/dfn&gt;.
        The Tracing Key is kept secret, never leaving the device.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;If the concept of ‚Äúbinary data‚Äù seems daunting or meaningless to you,
        it can help to see a few examples of how that information
        can be encoded into a human-readable form.&lt;/p&gt;
        &lt;p&gt;32 bytes of binary data can be represented by
        44-character-long &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot; rel=&quot;noopener noreferrer&quot;&gt;Base64-encoded&lt;/a&gt; string
        or a string of 64 &lt;a href=&quot;https://en.wikipedia.org/wiki/Hexadecimal#Binary_conversion&quot; rel=&quot;noopener noreferrer&quot;&gt;hexadecimal&lt;/a&gt; digits.
        You can generate these for yourself from the command line
        with the following commands:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c32&lt;/span&gt; &amp;lt; /dev/urandom | xxd &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 64
        &lt;span class=&quot;go&quot;&gt;211ad682549d92fbb6cd5dc42be5121b22f8864b3a7e93cedb9c43c83332440d
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c32&lt;/span&gt; &amp;lt; /dev/urandom | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt;
        &lt;span class=&quot;go&quot;&gt;2p&lt;wbr&gt;&lt;/wbr&gt;NDyj5LSr0GGi1IL2VOvsov&lt;wbr&gt;&lt;/wbr&gt;Bwm&lt;wbr&gt;&lt;/wbr&gt;G4Yp5YYP7leg928Y=
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;16 bytes of binary data can also be represented in Base64 or hexadecimal,
        but it‚Äôs more common and convenient to use a
        &lt;a href=&quot;https://tools.ietf.org/html/rfc4122&quot; title=&quot;A Universally Unique IDentifier (UUID) URN Namespace&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;abbr title=&quot;Universally Unique Identifier&quot;&gt;UUID&lt;/abbr&gt;&lt;/a&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;uuidgen
        &lt;span class=&quot;go&quot;&gt;33F1C4D5-3F1C-4FF0-A05E-A267FAB237CB
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;/aside&gt;
        &lt;p&gt;Every 24 hours,
        the device takes the Tracing Key and the day number (0, 1, 2, ‚Ä¶)
        and uses
        &lt;a href=&quot;https://tools.ietf.org/html/rfc5869&quot; title=&quot;HMAC-based Extract-and-Expand Key Derivation Function (HKDF)&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;abbr title=&quot;HMAC-based Extract-and-Expand Key Derivation Function&quot;&gt;HKDF&lt;/abbr&gt;&lt;/a&gt;
        to derive a 16-byte &lt;dfn&gt;&lt;del&gt;Daily Tracing Key&lt;/del&gt;&lt;ins&gt;Temporary Exposure Key&lt;/ins&gt;&lt;/dfn&gt;.
        These keys stay on the device,
        unless you consent to share them.&lt;/p&gt;
        &lt;p&gt;Every 15 minutes,
        the device takes the Temporary Exposure Key and
        the number of 10-minute intervals since the beginning of the day (0 ‚Äì 143),
        and uses
        &lt;a href=&quot;https://tools.ietf.org/html/rfc2104&quot; title=&quot;HMAC: Keyed-Hashing for Message Authentication&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;abbr title=&quot;Keyed-Hashing for Message Authentication&quot;&gt;HMAC&lt;/abbr&gt;&lt;/a&gt;
        to generate a new 16-byte &lt;dfn&gt;Rolling Proximity Identifier&lt;/dfn&gt;.
        This identifier is broadcast from the device using
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth_Low_Energy&quot; rel=&quot;noopener noreferrer&quot;&gt;Bluetooth &lt;abbr title=&quot;Low Energy&quot;&gt;LE&lt;/abbr&gt;&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;If someone using a contact tracing app gets a positive diagnosis,
        the central health authority requests their Temporary Exposure Keys
        for the period of time that they were contagious.
        If the patient consents,
        those keys are then added to the health authority‚Äôs database as
        &lt;dfn&gt;Positive Diagnosis Keys&lt;/dfn&gt;.
        Those keys are shared with other devices
        to determine if they‚Äôve had any contact over that time period.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;The &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-CryptographySpecificationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;Contact Tracing Cryptography Specification&lt;/a&gt;
        is concise, clearly written, and remarkably accessible.
        Anyone for whom the name &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot; rel=&quot;noopener noreferrer&quot;&gt;Diffie‚ÄìHellman&lt;/a&gt;&lt;/em&gt; even rings a bell
        are encouraged to give it a quick read.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;hardware&quot; href=&quot;#hardware&quot;&gt;&lt;/a&gt;Hardware&lt;/h3&gt;
        &lt;p&gt;Bluetooth organizes communications between devices
        around the concept of &lt;dfn&gt;services&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;A service describes a set of characteristics for accomplishing a particular task.
        A device may communicate with multiple services
        in the course of its operation.
        Many service definitions are &lt;a href=&quot;https://www.bluetooth.com/specifications/gatt/&quot; rel=&quot;noopener noreferrer&quot;&gt;standardized&lt;/a&gt;
        so that devices that do the same kinds of things communicate in the same way.&lt;/p&gt;
        &lt;p&gt;For example,
        a wireless heart rate monitor
        that uses Bluetooth to communicate to your phone
        would have a profile containing two services:
        a primary Heart Rate service and
        a secondary Battery service.&lt;/p&gt;
        &lt;p&gt;Apple and Google‚Äôs Contact Tracing standard
        defines a new Contact Detection service.&lt;/p&gt;
        &lt;p&gt;When a contact tracing app is running (either in the foreground or background),
        it acts as a &lt;dfn&gt;peripheral&lt;/dfn&gt;,
        advertising its support for the Contact Detection service
        to any other device within range.
        The Rolling Proximity Identifier generated every 15 minutes
        is sent in the advertising packet along with the 16-bit service UUID.&lt;/p&gt;
        &lt;p&gt;Here‚Äôs some code for doing this from an iOS device using
        the &lt;a href=&quot;https://developer.apple.com/documentation/corebluetooth&quot; rel=&quot;noopener noreferrer&quot;&gt;Core Bluetooth framework&lt;/a&gt;:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Core&lt;wbr&gt;&lt;/wbr&gt;Bluetooth&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Contact Detection service UUID&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;service&lt;wbr&gt;&lt;/wbr&gt;UUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;FD6F&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Rolling Proximity Identifier&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 16 bytes&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;peripheral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBPeripheral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;advertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;CBAdvertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Service&lt;wbr&gt;&lt;/wbr&gt;UUIDs&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;wbr&gt;&lt;/wbr&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;CBAdvertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Service&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;peripheral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;wbr&gt;&lt;/wbr&gt;Advertising&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;At the same time that the device broadcasts as a peripheral,
        it‚Äôs also scanning for other devices‚Äô Rolling Proximity Identifiers.
        Again, here‚Äôs how you might do that on iOS using Core Bluetooth:&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Conditionally, based on what operations are allowed by the system.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBCentral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;wbr&gt;&lt;/wbr&gt;Delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;central&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBCentral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;central&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;wbr&gt;&lt;/wbr&gt;For&lt;wbr&gt;&lt;/wbr&gt;Peripherals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;wbr&gt;&lt;/wbr&gt;Services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;wbr&gt;&lt;/wbr&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;var class=&quot;placeholder&quot;&gt;Delegate&lt;wbr&gt;&lt;/wbr&gt;Class&lt;/var&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBCentral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;wbr&gt;&lt;/wbr&gt;Delegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;central&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;central&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBCentral&lt;wbr&gt;&lt;/wbr&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;did&lt;wbr&gt;&lt;/wbr&gt;Discover&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;peripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CBPeripheral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;advertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rssi&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RSSI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CBAdvertisement&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Service&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Bluetooth is an almost ideal technology for contact tracing.
        It‚Äôs on every consumer smart phone.
        It operates with low power requirement,
        which lets it run continuously without draining your battery.
        And it &lt;em&gt;just&lt;/em&gt; so happens to have a transmission range
        that approximates the physical proximity required
        for the airborne transmission of infectious disease.
        This last quality is what allows contact tracing to be done
        without resorting to location data.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;As we noted in &lt;a href=&quot;/device-identifiers/#fingerprinting-in-todays-ios&quot;&gt;a previous article&lt;/a&gt;,
        individuals within a population
        can be singled out by as few as four timestamped coordinates.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;software&quot; href=&quot;#software&quot;&gt;&lt;/a&gt;Software&lt;/h3&gt;
        &lt;p&gt;Your device stores any Rolling Proximity Identifiers it discovers,
        and periodically checks them against
        a list of Positive Diagnosis Keys sent from the central health authority.&lt;/p&gt;
        &lt;p&gt;Each Positive Diagnosis Key corresponds to someone else‚Äôs Temporary Exposure Key.
        We can derive all of the possible Rolling Proximity Identifiers
        that it could advertise over the course of that day
        (using the same &lt;abbr title=&quot;Keyed-Hashing for Message Authentication&quot;&gt;HMAC&lt;/abbr&gt; algorithm
        that we used to derive our own Rolling Proximity Identifiers).
        If any matches were found among
        your device‚Äôs list of Rolling Proximity Identifiers,
        it means that you may have been in contact with an infected individual.&lt;/p&gt;
        &lt;p&gt;Suffice to say that digital contact tracing is really hard to get right.
        Given the importance of getting it right,
        both in terms of yielding accurate results and preserving privacy,
        Apple and Google are providing SDKs for app developers to use
        for iOS and Android, respectively.&lt;/p&gt;
        &lt;p&gt;All of the details we discussed about cryptography and Bluetooth
        are managed by the framework.
        The only thing we need to do as developers
        is communicate with the user ‚Äî
        specifically, requesting their permission to start contact tracing
        and notifying them about a positive diagnosis.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;exposurenotification&quot; href=&quot;#exposurenotification&quot;&gt;&lt;/a&gt;ExposureNotification&lt;/h2&gt;
        &lt;p&gt;When Apple announced the &lt;code&gt;Contact&lt;wbr&gt;&lt;/wbr&gt;Tracing&lt;/code&gt; framework on April 10th,
        all we had to go on were some annotated Objective-C headers.
        But as of the first public beta of iOS 13.5,
        we now have &lt;a href=&quot;https://developer.apple.com/documentation/exposurenotification&quot; rel=&quot;noopener noreferrer&quot;&gt;official documentation&lt;/a&gt;
        under its name: &lt;code&gt;Exposure&lt;wbr&gt;&lt;/wbr&gt;Notification&lt;/code&gt;.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;calculating-risk-of-exposure&quot; href=&quot;#calculating-risk-of-exposure&quot;&gt;&lt;/a&gt;Calculating Risk of Exposure&lt;/h3&gt;
        &lt;p&gt;A contact tracing app regularly
        fetches new Positive Diagnosis Keys from the central health authority.
        It then checks those keys
        against the device‚Äôs Rolling Proximity Identifiers.
        Any matches would indicate a possible risk of exposure.&lt;/p&gt;
        &lt;p&gt;In the first version of &lt;code&gt;Contact&lt;wbr&gt;&lt;/wbr&gt;Tracing&lt;/code&gt;,
        all you could learn about a positive match was
        how long you were exposed &lt;em&gt;(in 5 minute increments)&lt;/em&gt;
        and when contact occurred &lt;em&gt;(with an unspecified level of precision)&lt;/em&gt;.
        While we might applaud the level of privacy protections here,
        that doesn‚Äôt offer much in the way of actionable information.
        Depending on the individual,
        a push notification saying
        ‚ÄúYou were in exposed for 5‚Äì10 minutes sometime 3 days ago‚Äù
        could warrant a visit to the hospital
        or elicit no more concern than a missed call.&lt;/p&gt;
        &lt;p&gt;With &lt;code&gt;Exposure&lt;wbr&gt;&lt;/wbr&gt;Notification&lt;/code&gt;,
        you get a lot more information, including:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Days since last exposure incident&lt;/li&gt;
        &lt;li&gt;Cumulative duration of the exposure (capped at 30 minutes)&lt;/li&gt;
        &lt;li&gt;Minimum Bluetooth signal strength attenuation
        &lt;em&gt;(Transmission Power - RSSI)&lt;/em&gt;,
        which can tell you how close they got&lt;/li&gt;
        &lt;li&gt;Transmission risk,
        which is an app-definied value that may be based on
        symptoms, level of diagnosis verification,
        or other determination from the app or a health authority&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;For each instance of exposure,
        an &lt;a href=&quot;https://developer.apple.com/documentation/exposurenotification/enexposureinfo&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;ENExposure&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/code&gt;&lt;/a&gt;
        object provides all of the aforementioned information
        plus an overall risk score
        &lt;em&gt;(&lt;a href=&quot;https://developer.apple.com/documentation/exposurenotification/enrisklevel&quot; rel=&quot;noopener noreferrer&quot;&gt;from 1 to 8&lt;/a&gt;)&lt;/em&gt;,
        which is calculated from
        &lt;a href=&quot;https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration&quot; rel=&quot;noopener noreferrer&quot;&gt;the app‚Äôs assigned weights for each factor&lt;/a&gt;,
        according to this equation:&lt;/p&gt;
        &lt;figure&gt;
        &lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/contact-tracing-equation-96a6c712b3f0d4ba1aebe9f9e2356666d0a3884acd6c36ebc75579c14d878f42.svg&quot; integrity=&quot;sha256-lqbHErPw1Loa6+n54jVmZtCjiErNbDbrx1V5wU2Hj0I=&quot; crossorigin=&quot;anonymous&quot; role=&quot;img&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;figcaption hidden=&quot;&quot;&gt;
        &lt;p&gt;&lt;em&gt;S&lt;/em&gt; is a score,
        &lt;em&gt;W&lt;/em&gt; is a weighting,
        &lt;em&gt;r&lt;/em&gt; is risk,
        &lt;em&gt;d&lt;/em&gt; is days since exposure,
        &lt;em&gt;t&lt;/em&gt; is duration of exposure,
        &lt;em&gt;…ë&lt;/em&gt; is Bluetooth signal strength attenuation&amp;lt;/em&amp;gt;&lt;/p&gt;
        &lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;Apple provides this example in their &lt;a href=&quot;https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ExposureNotification-FrameworkDocumentationv1.2.pdf&quot; rel=&quot;noopener noreferrer&quot;&gt;framework documentation PDF&lt;/a&gt;:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/contact-tracing-example-equation-42e573fd6fe47e150d4fde64b9252406cabd9e7a022bb30fec9094cefc8d91b5.png&quot; integrity=&quot;sha256-QuVz/W/kfhUNT95kuSUkBsq9nnoCK7MP7JCUzvyNkbU=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;managing-permissions-and-disclosures&quot; href=&quot;#managing-permissions-and-disclosures&quot;&gt;&lt;/a&gt;Managing Permissions and Disclosures&lt;/h3&gt;
        &lt;p&gt;The biggest challenge we found with the original Contact Tracing framework API
        was dealing with all of its completion handlers.
        Most of the functionality was provided through asynchronous APIs;
        without a way to &lt;a href=&quot;/optional-throws-result-async-await/&quot;&gt;compose&lt;/a&gt; these operations,
        you can easily find yourself nested 4 or 5 closures deep,
        indented to the far side of your editor.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;If ever there was a need for
        &lt;a href=&quot;https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619&quot; rel=&quot;noopener noreferrer&quot;&gt;async/await&lt;/a&gt;
        in Swift,
        this was it.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Fortunately,
        the latest release of Exposure Notification includes a new
        &lt;a href=&quot;https://developer.apple.com/documentation/exposurenotification/enmanager&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;ENManager&lt;/code&gt;&lt;/a&gt; class,
        which simplifies much of that asynchronous state management.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ENManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;wbr&gt;&lt;/wbr&gt;Exposure&lt;wbr&gt;&lt;/wbr&gt;Notification&lt;wbr&gt;&lt;/wbr&gt;Enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// app is now advertising and monitoring for tracing identifiers&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;hr&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;tracing-a-path-back-to-normal-life&quot; href=&quot;#tracing-a-path-back-to-normal-life&quot;&gt;&lt;/a&gt;Tracing a path back to normal life&lt;/h2&gt;
        &lt;p&gt;Many of us have been sheltering in place for weeks, if not months.
        Until a vaccine is developed and made widely available,
        this is the most effective strategy we have for stopping the spread of the disease.&lt;/p&gt;
        &lt;p&gt;But experts are saying that a vaccine
        could be anywhere from 9 to 18 months away.
        &lt;em&gt;‚ÄúWhat will we do until then?‚Äù&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;At least here in the United States,
        we don‚Äôt yet have a national plan for getting back to normal,
        so it‚Äôs hard to say.
        What we do know is that
        it‚Äôs not going to be easy,
        and it‚Äôs not going to come all at once.&lt;/p&gt;
        &lt;p&gt;Once the rate of new infections stabilizes,
        our focus will become containing new outbreaks in communities.
        And to that end,
        technology-backed contact tracing can play a crucial role.&lt;/p&gt;
        &lt;p&gt;From a technical perspective,
        Apple and Google‚Äôs proposal gives us every reason to believe that
        we &lt;em&gt;can&lt;/em&gt; do contact tracing without compromising privacy.
        However,
        the amount of faith you put into this solution
        depends on how much you trust
        these companies and our governments in the first place.&lt;/p&gt;
        &lt;p&gt;Personally,
        I remain cautiously optimistic.
        Apple‚Äôs commitment to privacy has long been one of its greatest assets,
        and it‚Äôs now more important than ever.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Miscellaneous" />
      <summary type="html">&lt;p&gt;Apple and Google announced a joint initiative to deploy contact tracing functionality to the billions of devices running iOS or Android in the coming months. In this article, we‚Äôll take a first look at these specifications ‚Äî particularly, Apple‚Äôs proposed ExposureNotification framework ‚Äî in an effort to anticipate what this will all look like in practice.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Cross-Pollination</title>
      <link href="https://nshipster.com/cross-pollination/" rel="alternate" type="text/html" title="Cross-Pollination" />
      <published>2020-04-22T00:00:00-07:00</published>
      <updated>2020-04-22T00:00:00-07:00</updated>
      <id>https://nshipster.com/cross-pollination</id>
      <content type="html" xml:base="https://nshipster.com/cross-pollination/">
        &lt;p&gt;April is the month when apple trees start to bloom
        up here in the Pacific Northwest.
        All across Oregon‚Äôs Willamette Valley,
        from Portland stretching south to Eugene,
        long-barren branches sprout white, 5-petaled blossoms tinged with pink.
        Any other year,
        our family would be taking weekend trips
        southwest to Sherwood or east towards Hood River
        to visit their orchards.&lt;/p&gt;
        &lt;p&gt;Like the Fuji and Gala varieties that predominate in this region,
        most apple cultivars are &lt;dfn&gt;self-unfruitful&lt;/dfn&gt; ‚Äî
        which is to say that they require cross-pollination
        to produce a good crop consistently.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;There are a few cultivars that are partially self-fruitful
        and may produce a good crop without the help of another variety.
        But even they would typically benefit from cross-pollination.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;!-- diagram --&gt;
        &lt;p&gt;When fertilized by the pollen of Fuji apple blossoms
        (or those of Braeburn, Honey Crisp, or McIntosh varieties),
        a Gala apple tree can yield 20 kilograms of fruit each season.
        Those Gala trees, in return, endow their pollen on the Fuji apple trees
        so that they too may blossom and bear one or two bushels of fruit, each.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;the-dance-of-the-honey-bee&quot; href=&quot;#the-dance-of-the-honey-bee&quot;&gt;&lt;/a&gt;The Dance of the Honey Bee&lt;/h2&gt;
        &lt;p&gt;Appletree pollen is sticky.
        In contrast with the windborne pollen of Alder, Birch, and Ash trees
        (whose allergenic quality gave the Willamette its name,
        meaning &lt;em&gt;‚Äúvalley of sickness‚Äù&lt;/em&gt; in the indigenous Kalapuya dialect),
        appletrees rely on insects to transfer pollen ‚Äî
        particularly the &lt;dfn&gt;honey bee&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;Honey bees eat the pollen of flowers and convert their nectar into honey.
        Some of the pollen sticks to their furry bodies,
        which is inadvertently spread as they move from plant to plant.&lt;/p&gt;
        &lt;p&gt;When a scout bee encounters a food source,
        she flies back to the hive
        and communicates the location of that food source to male worker bees
        by performing what‚Äôs called a &lt;dfn&gt;waggle dance&lt;/dfn&gt;.
        Performed in darkness on the vertical honeycomb surface in the hive,
        she‚Äôs able to convey the precise location of new food sources to them
        by flying a coffee bean-shaped pattern oriented in the direction of the sun.
        It‚Äôs an incredible feat,
        made all the more remarkable by the fact that bees are not, individually,
        very intelligent.
        Bees have brains on the order of 1 million neurons,
        compared to the 100 billion neurons of a human brain.&lt;/p&gt;
        &lt;p&gt;If you move a food source closer and farther away from a hive,
        you can see how the dance changes to convey this new information.
        But move it &lt;em&gt;just&lt;/em&gt; past some critical point,
        and the dance becomes something entirely different:
        instead of the waggle dance,
        the bee performs a &lt;dfn&gt;round dance&lt;/dfn&gt;
        with a totally different cadence and flight path.&lt;/p&gt;
        &lt;!-- diagram --&gt;
        &lt;p&gt;For many years,
        the dance language of the bumblebee eluded all those who studied it.
        That is until 
        a mathematician named Barbara Shipman 
        made the connection between a bee‚Äôs dance language
        and the six-dimensional geometry of flag manifolds,
        of all things.
        What was the unique insight that allowed her to see what others couldn‚Äôt?
        She grew up in a family of beekeepers
        and cultivated an interest in mathematics and biology
        that carried throughout her studies.&lt;/p&gt;
        &lt;p&gt;The leap from furry, buzzing insects to abstract geometry is inconceivable
        unless you‚Äôre accustomed to looking at the world in that particular way.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;the-rose-that-grows-from-the-dunghill&quot; href=&quot;#the-rose-that-grows-from-the-dunghill&quot;&gt;&lt;/a&gt;The Rose that Grows From the Dunghill&lt;/h2&gt;
        &lt;p&gt;When Apple first announced the Swift programming language in 2014,
        it generated a flurry of excitement as we all tried to understand it.
        One of the most powerful tools at our disposal for understanding is &lt;em&gt;analogy&lt;/em&gt;:&lt;/p&gt;
        &lt;p&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;New Thing&lt;/var&gt;&lt;/code&gt; is like &lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;Familiar Thing&lt;/var&gt;&lt;/code&gt; crossed with &lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;Another Thing&lt;/var&gt;&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;So in those early days,
        there was a lot of discussion within the community
        attempting to compare and contrast Swift with
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Haskell&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Go&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Scheme_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Scheme&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Dylan_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Dylan&lt;/a&gt;.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Indeed, Apple originally pitched Swift as ‚ÄúObjective-C without the C‚Äù.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Last year,
        we saw something similar with at &lt;a href=&quot;/wwdc-2019/&quot;&gt;WWDC 2019&lt;/a&gt;.
        Anyone familiar with &lt;a href=&quot;https://en.wikipedia.org/wiki/React_(web_framework)&quot; rel=&quot;noopener noreferrer&quot;&gt;React&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Elm_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;Elm&lt;/a&gt;
        immediately recognized their influence on
        &lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot; rel=&quot;noopener noreferrer&quot;&gt;SwiftUI&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/documentation/combine&quot; rel=&quot;noopener noreferrer&quot;&gt;Combine&lt;/a&gt;
        (even if Apple hadn‚Äôt come out and acknowledged it explicitly).&lt;/p&gt;
        &lt;p&gt;For some,
        the connection between React and Elm with JavaScript
        is an inconvenient truth.
        I‚Äôve seen numerous developers profess their disdain for the language
        in ways that echo the old rivalry between iOS and Android
        (or the even older rivalry between &lt;a href=&quot;https://en.wikipedia.org/wiki/Get_a_Mac&quot; rel=&quot;noopener noreferrer&quot;&gt;Mac and PC&lt;/a&gt;).&lt;/p&gt;
        &lt;p&gt;And yet,
        there are countless examples of good ideas from &lt;em&gt;‚Äúthem‚Äù&lt;/em&gt;
        being criticized and mocked until they‚Äôre incorporated into an Apple product:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;
        &lt;kbd title=&quot;alt&quot;&gt;‚å•&lt;/kbd&gt;&lt;kbd title=&quot;tab&quot;&gt;‚á•&lt;/kbd&gt; app switching on Windows
        (&lt;kbd title=&quot;command&quot;&gt;‚åò&lt;/kbd&gt;&lt;kbd title=&quot;tab&quot;&gt;‚á•&lt;/kbd&gt; on macOS)&lt;/li&gt;
        &lt;li&gt;Dark mode in Android 
        (&lt;a href=&quot;/dark-mode/&quot;&gt;added in iOS 13&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;Generics in Java and other languages
        (a core feature in Swift, 
        &lt;a href=&quot;https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/using_imported_lightweight_generics_in_swift&quot; rel=&quot;noopener noreferrer&quot;&gt;later added to Objective-C&lt;/a&gt;)&lt;/li&gt;
        &lt;li&gt;
        &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html&quot; rel=&quot;noopener noreferrer&quot;&gt;JSX&lt;/a&gt;-style &lt;abbr title=&quot;domain-specific languages&quot;&gt;DSL&lt;/abbr&gt;s
        declarative UI 
        (&lt;a href=&quot;https://forums.swift.org/t/function-builders/25167&quot; rel=&quot;noopener noreferrer&quot;&gt;function builders&lt;/a&gt; in SwiftUI)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;All of which begs the question:&lt;/p&gt;
        &lt;p&gt;&lt;em&gt;Why did we consider these good ideas heretical until Apple did it?&lt;/em&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;us-vs-them&quot; href=&quot;#us-vs-them&quot;&gt;&lt;/a&gt;Us vs. Them&lt;/h2&gt;
        &lt;p&gt;Another flavor of this arises from the dichotomy between ‚ÄúNative‚Äù and ‚ÄúHybrid‚Äù.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Often the ‚Äúother‚Äù isn‚Äôt even distinguished beyond a negative definition ‚Äî
        ‚ÄúNon-native‚Äù.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Whenever a company writes some blog post about React Native,
        what inevitably follows is chorus of developers who either
        praise the decision as courageous (if switching away)
        or call it idiotic (if adopting it).&lt;/p&gt;
        &lt;p&gt;As developers,
        we tend to align ourselves with enlightenment ideals like objectivity.
        We say that we make decisions based in the indisputable reality of fact.
        We consider ourselves reasonable and our decisions well-reasoned.&lt;/p&gt;
        &lt;p&gt;But to what extent is this actually true?
        Do our thoughts lead us to our preferences,
        or do we use thoughts to rationalize them after the fact?&lt;/p&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;In the 1960s and 70s,
        the social psychologist Henri Tajfel and his colleagues
        ran a &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimal_group_paradigm&quot; rel=&quot;noopener noreferrer&quot;&gt;series of experiments&lt;/a&gt; 
        that demonstrated how little it takes
        for people to engage in intergroup discrimination.&lt;/p&gt;
        &lt;p&gt;In one experiment,
        a group of boys were shown pictures with clusters of dots
        and instructed to guess how many there were
        as a test of their visual judgment.
        The researchers split the group between
        those who overestimated or underestimated the number.
        Except, they only pretended to do this ‚Äî
        the boys were, in fact, randomly assigned to one of the two groups.
        They were then given the task of allocating a fixed amount of real money
        to other boys in the study.&lt;/p&gt;
        &lt;p&gt;The results surprised even the researchers:&lt;/p&gt;
        &lt;p&gt;Overwhelmingly, the boys chose outcomes where their assigned group
        (under- or over-estimators) received more money than their counterparts ‚Äî
        &lt;em&gt;even when that meant getting less overall&lt;/em&gt;.&lt;/p&gt;
        &lt;p&gt;Successful replication of these results in follow-up studies since then
        presents compelling evidence of this peculiarity in human nature.
        That a willingness to engage in ‚Äúus vs. them‚Äù discrimination
        can arise from completely artificial distinctions,
        irrespective of any rationale of self-interest.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;&lt;em&gt;How else could you explain the intense tribalism
        around how we talk to computers?&lt;/em&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;the-dream-of-purity&quot; href=&quot;#the-dream-of-purity&quot;&gt;&lt;/a&gt;The Dream of Purity&lt;/h2&gt;
        &lt;p&gt;When a developer proudly declares something to be
        ‚ÄúPure Swift‚Äù or ‚Äú100% JavaScript free‚Äù,
        what are they really saying?
        What‚Äôs presented as an objective statement of fact
        often feels more like an oath of allegiance.&lt;/p&gt;
        &lt;p&gt;If you see the existence of competing technologies
        as a fight between good and evil,
        perhaps there are more important battles to fight.
        If you can‚Äôt evaluate solutions as a series of trade-offs,
        what chance do you have at accomplishing anything at all?&lt;/p&gt;
        &lt;p&gt;Yes,
        there are real differences between technologies
        and reasonable people disagree about
        which one is best-suited to solve a particular problem.
        But don‚Äôt mistake this for a moral contest.&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Purity is an ideal;
        a vision of the condition which needs yet to be created,
        or such as needs to be diligently protected against the genuine or imagined odds.
        Without such a vision, neither the concept of purity makes sense,
        nor the distinction between purity and impurity can be sensibly drawn.&lt;/p&gt;
        &lt;p&gt;‚Äì Zygmunt Bauman&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;hr&gt;
        &lt;p&gt;It‚Äôs of no practical consequence that
        the grounds on which Apple Park sits today
        were fruit orchards a hundred years ago.
        But it‚Äôs poetic.
        Long before it was ‚ÄúSilicon Valley‚Äù,
        the stretch of land between the San Andreas and Hayward faults
        was called ‚Äúthe Valley of Heart‚Äôs Delight‚Äù
        for all of its fruit trees and flowering plants.&lt;/p&gt;
        &lt;p&gt;Dwelling on this,
        you might reflect on how humans are like apple trees.
        That we need a variety of different influences to reach our potential.
        (Even self-starters benefit from a unique perspective).&lt;/p&gt;
        &lt;p&gt;You might then consider what we share in common with
        the bees that pollinate apple trees.
        Like them,
        our success comes not from our individual intelligence,
        but in our ability to share information.&lt;/p&gt;
        &lt;p&gt;Whether we‚Äôre like bees or like apples,
        we come away learning the same lesson:
        We can achieve remarkable results by working together.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Miscellaneous" />
      <summary type="html">&lt;p&gt;A brief essay about the flowering of ideas, written for the occasion of Earth Day.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Swift Logging</title>
      <link href="https://nshipster.com/swift-log/" rel="alternate" type="text/html" title="Swift Logging" />
      <published>2020-03-26T00:00:00-07:00</published>
      <updated>2020-03-26T00:00:00-07:00</updated>
      <id>https://nshipster.com/swift-log</id>
      <content type="html" xml:base="https://nshipster.com/swift-log/">
        &lt;p&gt;In 2002,
        the United States Congress enacted
        the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act&quot; rel=&quot;noopener noreferrer&quot;&gt;Sarbanes‚ÄìOxley Act&lt;/a&gt;,
        which introduced broad oversight to corporations
        in response to accounting scandals at companies like
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Enron_scandal&quot; rel=&quot;noopener noreferrer&quot;&gt;Enron&lt;/a&gt; and 
        &lt;a href=&quot;https://en.wikipedia.org/wiki/MCI_Inc.#Accounting_scandals&quot; rel=&quot;noopener noreferrer&quot;&gt;MCI WorldCom&lt;/a&gt;
        around that time.
        This act,
        &lt;a href=&quot;https://en.wikipedia.org/wiki/PCI_DSS&quot; rel=&quot;noopener noreferrer&quot;&gt;
        &lt;abbr title=&quot;Payment Card Industry Data Security Standard&quot;&gt;PCI&lt;/abbr&gt;
        &lt;/a&gt;
        and
        &lt;a href=&quot;https://en.wikipedia.org/wiki/HIPAA&quot; rel=&quot;noopener noreferrer&quot;&gt;
        &lt;abbr title=&quot;Health Insurance Portability and Accountability Act&quot;&gt;
        HIPAA
        &lt;/abbr&gt;
        &lt;/a&gt;,
        formed the regulatory backdrop
        for a new generation of
        &lt;abbr title=&quot;information technology&quot;&gt;IT&lt;/abbr&gt; companies
        emerging from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dot-com_bubble&quot; rel=&quot;noopener noreferrer&quot;&gt;dot-com bubble&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;Around the same time,
        we saw the emergence of ephemeral, distributed infrastructure ‚Äî
        what we now call &lt;a href=&quot;https://en.wikipedia.org/wiki/Cloud_computing&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúCloud computing‚Äù&lt;/a&gt; ‚Äî
        a paradigm that made systems more capable but also more complex.&lt;/p&gt;
        &lt;p&gt;To solve both the regulatory and logistical challenges of the 21&lt;sup&gt;st&lt;/sup&gt; century,
        our field established best practices around application logging.
        And many of the same tools and standards are still in use today.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Just as &lt;code&gt;print&lt;/code&gt; is a poor man‚Äôs &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/429/&quot; rel=&quot;noopener noreferrer&quot;&gt;debugger&lt;/a&gt;,
        it‚Äôs also a shallow replacement for a proper logging system,
        with distinct log levels and configurable output settings.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;&lt;em&gt;Sarbanes‚ÄìOxley&lt;/em&gt; is notable for giving rise to
        &lt;em&gt;&lt;a href=&quot;https://www.oyez.org/cases/2014/13-7451&quot; rel=&quot;noopener noreferrer&quot;&gt;Yates v. United States&lt;/a&gt;&lt;/em&gt;:
        a delightful Supreme Court case that asked the question
        _‚ÄúAre fish (üêü) tangible objects?‚Äù&lt;/p&gt;
        &lt;p&gt;Although the Court found in a 5 ‚Äì 4 decision
        that fish are &lt;em&gt;not&lt;/em&gt;, in fact, ‚Äútangible objects‚Äù 
        (for purposes of the statute),
        we remain unconvinced
        for the same reasons articulated in
        &lt;a href=&quot;https://supreme.justia.com/cases/federal/us/574/528/#tab-opinion-3243031&quot; rel=&quot;noopener noreferrer&quot;&gt;Justice Kagan‚Äôs dissent&lt;/a&gt;
        &lt;em&gt;(and pretty much anything written by
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Claude_Shannon&quot; rel=&quot;noopener noreferrer&quot;&gt;Claude Shannon&lt;/a&gt;,
        for that matter)&lt;/em&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;This week on NSHipster,
        we‚Äôre taking a look at
        &lt;a href=&quot;https://github.com/apple/swift-log&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt;&lt;/a&gt;:
        a community-driven, open-source standard for logging in Swift.&lt;/p&gt;
        &lt;p&gt;Developed by the Swift on Server community
        and endorsed by the
        &lt;a href=&quot;https://swift.org/server/&quot; rel=&quot;noopener noreferrer&quot;&gt;SSWG (Swift Server Work Group)&lt;/a&gt;,
        its benefit isn‚Äôt limited to use on the server.
        Indeed,
        any Swift code intended to be run from the command line
        would benefit from adopting &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt;.
        Read on to learn how.&lt;/p&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;&lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; is distinct from the
        &lt;a href=&quot;https://developer.apple.com/documentation/os/logging&quot; rel=&quot;noopener noreferrer&quot;&gt;Unified Logging System&lt;/a&gt;
        (&lt;code&gt;os_log&lt;/code&gt;),
        which is specific to Apple platforms.&lt;/p&gt;
        &lt;p&gt;Readers may already be familiar with &lt;code&gt;os_log&lt;/code&gt; and its, &lt;em&gt;*ahem*&lt;/em&gt;
        &lt;a href=&quot;https://mjtsai.com/blog/2019/03/06/problems-with-os_log/&quot; rel=&quot;noopener noreferrer&quot;&gt;quirks&lt;/a&gt;
        &lt;em&gt;(a topic for a future article, perhaps)&lt;/em&gt;.
        But for the uninitiated,
        all you need to know is that
        &lt;code&gt;os_log&lt;/code&gt; is for macOS and iOS apps and
        &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; is for everything else.&lt;/p&gt;
        &lt;p&gt;If you‚Äôre interested in learning more about Unified Logging,
        you can get a quick overview of 
        by skimming the &lt;a href=&quot;https://developer.apple.com/documentation/os/logging&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;os_log&lt;/code&gt; docs&lt;/a&gt;;
        for an in-depth look,
        check out
        &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/721/&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúUnified Logging and Activity Tracing‚Äù&lt;/a&gt;
        from WWDC 2016
        and
        &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/405/&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúMeasuring Performance Using Logging‚Äù&lt;/a&gt;
        from WWDC 2018.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;As always,
        an example would be helpful in guiding our discussion.
        In the spirit of transparency and nostalgia,
        let‚Äôs imagine writing a Swift program
        that audits the finances of a ‚Äô00s Fortune 500 company.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Auditor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Auditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ftp://&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;/reports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;qdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// poll for changes&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;An &lt;code&gt;Auditor&lt;/code&gt; type polls for changes to a directory
        &lt;em&gt;(an FTP server, because remember: it‚Äôs 2003)&lt;/em&gt;.
        Each time a file is added, removed, or changed,
        its contents are audited for discrepancies.
        If any financial oddities are encountered,
        they‚Äôre logged using the &lt;code&gt;print&lt;/code&gt; function.
        The same goes for issues connecting to the FTP,
        or any other problems the program might encounter ‚Äî
        everything‚Äôs logged using &lt;code&gt;print&lt;/code&gt;.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;The implementation details aren‚Äôt important;
        only the interface is relevant to our discussion.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Simple enough.
        We can run it from the command line like so:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;starting up...
        ERROR: unable to reconnect to FTP
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;try again after restarting PC under our desk&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;go&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;+ connected to FTP server
        ! accounting discrepancy in balance sheet 
        ** Quicken database corruption! **
        ^C
        shutting down...
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Such a program might be technically compliant,
        but it leaves a lot of room for improvement:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;For one,
        our output doesn‚Äôt have any timestamps associated with it.
        There‚Äôs no way to know whether a problem was detected an hour ago or last week.&lt;/li&gt;
        &lt;li&gt;Another problem is that our output lacks any coherent structure.
        At a glance,
        there‚Äôs no straightforward way to isolate program noise from real issues.&lt;/li&gt;
        &lt;li&gt;Finally, ‚Äî
        &lt;em&gt;and this is mostly due to an under-specified example&lt;/em&gt; ‚Äî
        it‚Äôs unclear how this output is handled.
        Where is this output going?
        How is it collected, aggregated, and analyzed?&lt;/li&gt;
        &lt;/ul&gt;
        &lt;hr&gt;
        &lt;p&gt;The good news is that
        all of these problems (and many others) can be solved
        by adopting a formal logging infrastructure in your project.&lt;/p&gt;
        &lt;hr&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;adopting-swiftlog-in-your-swift-program&quot; href=&quot;#adopting-swiftlog-in-your-swift-program&quot;&gt;&lt;/a&gt;Adopting SwiftLog in Your Swift Program&lt;/h2&gt;
        &lt;p&gt;Adding &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; to an existing Swift package is a breeze.
        You can incorporate it incrementally
        without making any fundamental changes to your code
        and have it working in a matter of minutes.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;add-swift-log-as-a-package-dependency&quot; href=&quot;#add-swift-log-as-a-package-dependency&quot;&gt;&lt;/a&gt;Add swift-log as a Package Dependency&lt;/h3&gt;
        &lt;p&gt;In your &lt;code&gt;Package.swift&lt;/code&gt; manifest,
        add &lt;code&gt;swift-log&lt;/code&gt; as a package dependency and
        add the &lt;code&gt;Logging&lt;/code&gt; module to your target‚Äôs list of dependencies.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// swift-tools-version:5.1&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;wbr&gt;&lt;/wbr&gt;Description&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;audit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;audit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://github.com/apple/swift-log.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;audit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;create-a-shared-global-logger&quot; href=&quot;#create-a-shared-global-logger&quot;&gt;&lt;/a&gt;Create a Shared, Global Logger&lt;/h3&gt;
        &lt;p&gt;&lt;code&gt;Logger&lt;/code&gt; provides two initializers,
        the simpler of them taking a single &lt;code&gt;label&lt;/code&gt; parameter:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.NSHipster.Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot; rel=&quot;noopener noreferrer&quot;&gt;POSIX&lt;/a&gt; systems,
        programs operate on three, predefined
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot; rel=&quot;noopener noreferrer&quot;&gt;streams&lt;/a&gt;:&lt;/p&gt;
        &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;File Handle&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Standard Input&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Standard Output&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Standard Error&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;By default,
        &lt;code&gt;Logger&lt;/code&gt; uses the built-in &lt;code&gt;Stream&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/code&gt; type
        to write logged messages to standard output (&lt;code&gt;stdout&lt;/code&gt;).
        We can override this behavior to instead write to standard error (&lt;code&gt;stderr&lt;/code&gt;)
        by using the more complex initializer,
        which takes a &lt;code&gt;factory&lt;/code&gt; parameter:
        a closure that takes a single &lt;code&gt;String&lt;/code&gt; parameter (the label)
        and returns an object conforming to &lt;code&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/code&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.NSHipster.Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stream&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;wbr&gt;&lt;/wbr&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Alternatively,
        you can set default logger globally
        using the &lt;code&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;System.bootstrap()&lt;/code&gt; method.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Stream&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;wbr&gt;&lt;/wbr&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.NSHipster.Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;After doing this,
        any subsequent &lt;code&gt;Logger&lt;/code&gt; instances created
        using the &lt;code&gt;Logger(label:)&lt;/code&gt; initializer
        will default to the specified handler.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;replacing-print-statements-with-logging-statements&quot; href=&quot;#replacing-print-statements-with-logging-statements&quot;&gt;&lt;/a&gt;Replacing Print Statements with Logging Statements&lt;/h3&gt;
        &lt;p&gt;Declaring our &lt;code&gt;logger&lt;/code&gt; as a top-level constant
        lets us call it anywhere within our module.
        Let‚Äôs revisit our example and spruce it up with our new logger:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Auditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shutting down&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;auditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ftp://&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;/reports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;qdf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// poll for changes&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;The &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, and &lt;code&gt;critical&lt;/code&gt; methods
        log a message at their respective &lt;dfn&gt;log level&lt;/dfn&gt;.
        &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; defines seven levels,
        ranked in ascending order of severity from &lt;code&gt;trace&lt;/code&gt; to &lt;code&gt;critical&lt;/code&gt;:&lt;/p&gt;
        &lt;table id=&quot;log-levels&quot;&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;Level&lt;/th&gt;
        &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr id=&quot;log-level-trace&quot;&gt;
        &lt;td&gt;&lt;code&gt;.trace&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for messages that contain information only when debugging a program.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-debug&quot;&gt;
        &lt;td&gt;&lt;code&gt;.debug&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for messages that contain information normally of use only when debugging a program.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-info&quot;&gt;
        &lt;td&gt;&lt;code&gt;.info&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for informational messages.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-notice&quot;&gt;
        &lt;td&gt;&lt;code&gt;.notice&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for conditions that are not error conditions, but that may require special handling.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-warning&quot;&gt;
        &lt;td&gt;&lt;code&gt;.warning&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for messages that are not error conditions, but more severe than &lt;code&gt;.notice&lt;/code&gt;
        &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-error&quot;&gt;
        &lt;td&gt;&lt;code&gt;.error&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for error conditions.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=&quot;log-level-critical&quot;&gt;
        &lt;td&gt;&lt;code&gt;.critical&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;Appropriate for critical error conditions that usually require immediate attention.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;If we re-run our &lt;code&gt;audit&lt;/code&gt; example with our new logging framework in place,
        we can see the immediate benefit of clearly-labeled, distinct severity levels
        in log lines:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;2020-03-26T09:40:10-0700 critical: Couldn't connect to ftp://&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;try again after plugging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;loose ethernet cord&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;go&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;2020-03-26T10:21:22-0700 warning: Discrepancy in balance sheet
        2020-03-26T10:21:22-0700 error: Quicken database corruption
        ^C
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Beyond merely labeling messages,
        &lt;em&gt;which ‚Äî don‚Äôt get us wrong ‚Äî is sufficient benefit on its own&lt;/em&gt;,
        log levels provide a configurable level of disclosure.
        Notice that the messages logged with the &lt;code&gt;trace&lt;/code&gt; method 
        don‚Äôt appear in the example output.
        That‚Äôs because &lt;code&gt;Logger&lt;/code&gt; defaults to showing only messages
        logged as &lt;code&gt;info&lt;/code&gt; level or higher.&lt;/p&gt;
        &lt;p&gt;You can configure that by setting the &lt;code&gt;Logger&lt;/code&gt;‚Äôs &lt;code&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/code&gt; property.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.NSHipster.Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;After making this change,
        the example output would instead look something like this:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Terminal&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;2020-03-25T09:40:00-0700 trace: Starting up
        2020-03-26T09:40:10-0700 critical: Couldn't connect to ftp://&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;
        2020-03-25T09:40:11-0700 trace: Shutting down
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;try again after plugging &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;loose ethernet cord&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;go&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;swift run audit
        &lt;span class=&quot;go&quot;&gt;2020-03-25T09:41:00-0700 trace: Starting up
        2020-03-26T09:41:01-0700 debug: Connected to ftp://&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;/reports
        2020-03-26T09:41:01-0700 debug: Watching file extensions [&quot;xls&quot;, &quot;ods&quot;, &quot;qdf&quot;]
        2020-03-26T10:21:22-0700 warning: Discrepancy in balance sheet
        2020-03-26T10:21:22-0700 error: Quicken database corruption
        ^C
        2020-03-26T10:30:00-0700 trace: Shutting down
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;using-multiple-logging-handlers-at-once&quot; href=&quot;#using-multiple-logging-handlers-at-once&quot;&gt;&lt;/a&gt;Using Multiple Logging Handlers at Once&lt;/h2&gt;
        &lt;p&gt;Thinking back to our objections in the original example,
        the only remaining concern 
        is what we actually &lt;em&gt;do&lt;/em&gt; with these logs.&lt;/p&gt;
        &lt;p&gt;According to &lt;a href=&quot;https://12factor.net/logs&quot; rel=&quot;noopener noreferrer&quot;&gt;12 Factor App&lt;/a&gt; principles:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;xi-logs&quot; href=&quot;#xi-logs&quot;&gt;&lt;/a&gt;XI. Logs&lt;/h2&gt;
        &lt;p&gt;&lt;em&gt;[‚Ä¶]&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;A twelve-factor app never concerns itself with 
        routing or storage of its output stream.&lt;/strong&gt; 
        It should not attempt to write to or manage logfiles. 
        Instead, each running process writes its event stream, unbuffered, to &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Collecting, routing, indexing, and analyzing logs across a distributed system
        often requires a constellation of open-source libraries and commercial products.
        Fortunately,
        most of these components traffic in a shared currency of
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Syslog&quot; rel=&quot;noopener noreferrer&quot;&gt;syslog&lt;/a&gt; messages ‚Äî
        and thanks to
        &lt;a href=&quot;https://github.com/ianpartridge/swift-log-syslog&quot; rel=&quot;noopener noreferrer&quot;&gt;this package by Ian Partridge&lt;/a&gt;,
        Swift can, as well.&lt;/p&gt;
        &lt;p&gt;That said,
        few engineers have managed to retrieve this information
        from the likes of &lt;a href=&quot;https://www.splunk.com&quot; rel=&quot;noopener noreferrer&quot;&gt;Splunk&lt;/a&gt;
        and lived to tell the tale.
        For us mere mortals,
        we might prefer
        &lt;a href=&quot;https://github.com/wlisac/swift-log-slack&quot; rel=&quot;noopener noreferrer&quot;&gt;this package by Will Lisac&lt;/a&gt;,
        which sends log messages to
        &lt;a href=&quot;https://slack.com&quot; rel=&quot;noopener noreferrer&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;The good news is that we can use both at once,
        without changing how messages are logged at the call site
        by using another piece of the &lt;code&gt;Logging&lt;/code&gt; module:
        &lt;code&gt;Multiplex&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/code&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;Syslog&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;Slack&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;webhook&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SLACK_LOGGING_WEBHOOK_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;slack&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Slack&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;webhook&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webhook&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slack&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critical&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;syslog&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Syslog&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Multiplex&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;syslog&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slack&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.NSHipster.Auditor2000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Harkening to &lt;a href=&quot;https://12factor.net/config&quot; rel=&quot;noopener noreferrer&quot;&gt;another 12 Factor principle&lt;/a&gt;,
        we pull the webhook URL from an environment variable rather than hard-coding it.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;With all of this in place,
        our system will log everything in syslog format to standard out (&lt;code&gt;stdout&lt;/code&gt;),
        where it can be collected and analyzed by some other system.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;But the real strength of this approach to logging
        is that it can be extended to meet the specific needs of any environment.
        Instead of writing syslog to &lt;code&gt;stdout&lt;/code&gt; or Slack messages,
        your system could send emails,
        open SalesForce tickets,
        or trigger a webhook to activate some 
        &lt;abbr title=&quot;Internet of Things&quot;&gt;IoT&lt;/abbr&gt; device.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Granted, each of those examples would probably be better served
        by a separate monitoring service that ingests a log stream 
        and reacts to events according to a more elaborate set of rules.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Here‚Äôs how you can extend &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; to fit your needs
        by writing a custom log handler:&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;creating-a-custom-log-handler&quot; href=&quot;#creating-a-custom-log-handler&quot;&gt;&lt;/a&gt;Creating a Custom Log Handler&lt;/h2&gt;
        &lt;p&gt;The &lt;code&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/code&gt; protocol specifies the requirements for types
        that can be registered as message handlers by &lt;code&gt;Logger&lt;/code&gt;:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Metadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;In the process of writing this article,
        I created &lt;a href=&quot;https://github.com/NSHipster/swift-log-github-actions&quot; rel=&quot;noopener noreferrer&quot;&gt;custom handler&lt;/a&gt; 
        that formats log messages for GitHub Actions
        so that they‚Äôre surfaced on GitHub‚Äôs UI like so:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/github-actions-ui-29966d7466f9a4503972d48c1fcf7e37a6c4daab53ca9313a37ef8846d13abf9.png&quot; integrity=&quot;sha256-KZZtdGb5pFA5ctSMH89+N6bE2qtTypMTo374hG0Tq/k=&quot; crossorigin=&quot;anonymous&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;For more information, 
        see
        &lt;a href=&quot;https://help.github.com/en/actions/reference/workflow-commands-for-github-actions&quot; rel=&quot;noopener noreferrer&quot;&gt;‚ÄúWorkflow commands for GitHub Actions.‚Äù&lt;/a&gt;&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;If you‚Äôre interested in making your own logging handler,
        you can learn a lot by just browsing 
        &lt;a href=&quot;https://github.com/NSHipster/swift-log-github-actions&quot; rel=&quot;noopener noreferrer&quot;&gt;the code for this project&lt;/a&gt;.
        But I did want to call out a few points of interest here:&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;conditional-boostrapping&quot; href=&quot;#conditional-boostrapping&quot;&gt;&lt;/a&gt;Conditional Boostrapping&lt;/h3&gt;
        &lt;p&gt;When bootstrapping your logging system,
        you can define some logic for how things are configured.
        For logging formatters specific to a particular CI vendor,
        for example, 
        you might check the environment to see if you‚Äôre running locally or on CI
        and adjust accordingly.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Are we running in a Git&lt;wbr&gt;&lt;/wbr&gt;Hub Actions workflow?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;wbr&gt;&lt;/wbr&gt;Info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;standard&lt;wbr&gt;&lt;/wbr&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stream&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;standard&lt;wbr&gt;&lt;/wbr&gt;Output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;testing-custom-log-handlers&quot; href=&quot;#testing-custom-log-handlers&quot;&gt;&lt;/a&gt;Testing Custom Log Handlers&lt;/h3&gt;
        &lt;p&gt;Testing turned out to be more of a challenge than originally anticipated.
        I could be missing something obvious,
        but there doesn‚Äôt seem to be a way to create assertions about
        text written to standard output.
        So here‚Äôs what I did instead:&lt;/p&gt;
        &lt;p&gt;First,
        create an &lt;code&gt;internal&lt;/code&gt; initializer that takes a &lt;code&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/code&gt; parameter,
        and store it in a &lt;code&gt;private&lt;/code&gt; property.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Swift symbols have &lt;code&gt;internal&lt;/code&gt; access control by default;
        the keyword is included here for clarity.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Then, 
        in the test target,
        create a type that adopts &lt;code&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/code&gt;
        and collects logged messages to a stored property
        for later inspection.
        By using a 
        &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html#ID5&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;@testable import&lt;/code&gt;&lt;/a&gt; 
        of the module declaring &lt;code&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/code&gt;,
        we can access that &lt;code&gt;internal&lt;/code&gt; initializer from before,
        and pass an instance of &lt;code&gt;Mock&lt;wbr&gt;&lt;/wbr&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/code&gt; to intercept logged messages.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;@testable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logging&lt;wbr&gt;&lt;/wbr&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mock&lt;wbr&gt;&lt;/wbr&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private(set)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Git&lt;wbr&gt;&lt;/wbr&gt;Hub&lt;wbr&gt;&lt;/wbr&gt;Actions&lt;wbr&gt;&lt;/wbr&gt;Log&lt;wbr&gt;&lt;/wbr&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// MARK: - Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;With these pieces in place,
        we can finally test that our handler works as expected:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;wbr&gt;&lt;/wbr&gt;Logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expectation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mock&lt;wbr&gt;&lt;/wbr&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ü•±&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;üò±&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;XCTAssert&lt;wbr&gt;&lt;/wbr&gt;Greater&lt;wbr&gt;&lt;/wbr&gt;Than&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;wbr&gt;&lt;/wbr&gt;Level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;XCTAssert&lt;wbr&gt;&lt;/wbr&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// trace log is ignored&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;XCTAssert&lt;wbr&gt;&lt;/wbr&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has&lt;wbr&gt;&lt;/wbr&gt;Prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;::error &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;XCTAssert&lt;wbr&gt;&lt;/wbr&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has&lt;wbr&gt;&lt;/wbr&gt;Suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;::üò±&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;As to how or where messages are logged,
        &lt;code&gt;Swift&lt;wbr&gt;&lt;/wbr&gt;Log&lt;/code&gt; is surprisingly tight-lipped.
        There‚Äôs &lt;a href=&quot;https://github.com/apple/swift-log/blob/0e21dd789300fc37a43019fba68b4e97c9938142/Sources/Logging/Logging.swift#L524-L550&quot; rel=&quot;noopener noreferrer&quot;&gt;an internal type&lt;/a&gt; that buffers writes to &lt;code&gt;stdout&lt;/code&gt;,
        but it‚Äôs not exposed by the module.&lt;/p&gt;
        &lt;p&gt;If you‚Äôre in search for a replacement
        and would prefer not to copy-paste something as involved as that,
        here‚Äôs a dead-simple alternative:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Standard&lt;wbr&gt;&lt;/wbr&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;wbr&gt;&lt;/wbr&gt;Output&lt;wbr&gt;&lt;/wbr&gt;Stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;/aside&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; integrity=&quot;sha256-GtLanAQWk2RePAe438jnWEiTKYLV0wQgYGB2siWUD1k=&quot; crossorigin=&quot;anonymous&quot; href=&quot;/assets/articles/swift-log-1ad2da9c041693645e3c07b8dfc8e75848932982d5d30420606076b225940f59.css&quot;&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Swift" />
      <summary type="html">&lt;p&gt;Developed by the Swift on Server community, its benefit isn‚Äôt limited to use on the server. Indeed, any Swift code intended to be run from the command line would benefit from adopting SwiftLog.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Xcode Build Configuration Files</title>
      <link href="https://nshipster.com/xcconfig/" rel="alternate" type="text/html" title="Xcode Build Configuration Files" />
      <published>2020-02-27T00:00:00-08:00</published>
      <updated>2020-02-27T00:00:00-08:00</updated>
      <id>https://nshipster.com/xcconfig</id>
      <content type="html" xml:base="https://nshipster.com/xcconfig/">
        &lt;p&gt;Software development best practices
        &lt;a href=&quot;https://12factor.net/config&quot; rel=&quot;noopener noreferrer&quot;&gt;prescribe&lt;/a&gt;
        strict separation of configuration from code.
        Yet developers on Apple platforms
        often struggle to square these guidelines with Xcode‚Äôs project-heavy workflow.&lt;/p&gt;
        &lt;p&gt;Understanding what each project setting does
        and how they all interact with one another
        is a skill that can take years to hone.
        And the fact that much of this information
        is buried deep within the GUIs of Xcode does us no favors.&lt;/p&gt;
        &lt;p&gt;Navigate to the ‚ÄúBuild Settings‚Äù tab of the project editor,
        and you‚Äôll be greeted by &lt;em&gt;hundreds&lt;/em&gt; of build settings
        spread across layers of projects, targets, and configurations ‚Äî
        &lt;em&gt;and that‚Äôs to say nothing of the other six tabs!&lt;/em&gt;&lt;/p&gt;
        &lt;picture&gt;
        &lt;source srcset=&quot;/assets/xcconfig-project-build-settings--dark-e07ddeb7133a1c8247b7d53f9db7c0be6dd7728dfa4b58c8a6ec3ebbec4ea596.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&lt;/source&gt;
        &lt;img src=&quot;/assets/xcconfig-project-build-settings--light-f7043782f0b56d637bec89eefa0d37939b38ef33f55c293e326d3fecbc06df49.png&quot; alt=&quot;Xcode build settings&quot;&gt;
        &lt;/picture&gt;
        &lt;p&gt;Fortunately,
        there‚Äôs a better way to manage all of this configuration
        that doesn‚Äôt involve clicking through a maze of tabs and disclosure arrows.&lt;/p&gt;
        &lt;p&gt;This week,
        we‚Äôll show you how you can use text-based &lt;code&gt;xcconfig&lt;/code&gt; files
        to externalize build settings from Xcode
        to make your projects more compact, comprehensible, and powerful.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Check out &lt;a href=&quot;https://xcodebuildsettings.com&quot; rel=&quot;noopener noreferrer&quot;&gt;XcodeBuildSettings.com&lt;/a&gt;
        for a complete reference of every build setting
        supported for the latest version of Xcode.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;&lt;a href=&quot;https://help.apple.com/xcode/mac/8.3/#/dev745c5c974&quot; rel=&quot;noopener noreferrer&quot;&gt;Xcode build configuration files&lt;/a&gt;,
        more commonly known by their &lt;code&gt;xcconfig&lt;/code&gt; file extension,
        allow build settings for your app to be declared and managed without Xcode.
        They‚Äôre plain text,
        which means they‚Äôre much friendlier to source control systems
        and can be modified with any editor.&lt;/p&gt;
        &lt;p&gt;Fundamentally,
        each configuration file consists of a sequence of key-value assignments
        with the following syntax:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;var class=&quot;placeholder&quot;&gt;value&lt;/var&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;For example,
        to specify the Swift language version for a project,
        you‚Äôd specify the &lt;code&gt;SWIFT_VERSION&lt;/code&gt; build setting like so:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;SWIFT_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;5.0&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;According to the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;abbr title=&quot;Portable Operating System Interface&quot;&gt;POSIX&lt;/abbr&gt; standard&lt;/a&gt;
        environment variables have names consisting solely of
        uppercase letters, digits, and underscore (&lt;code&gt;_&lt;/code&gt;) ‚Äî
        a convention I like to call &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt; üêçüóØ.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;At first glance,
        &lt;code&gt;xcconfig&lt;/code&gt; files bear a striking resemblance to &lt;code&gt;.env&lt;/code&gt; files,
        with their simple, newline-delimited syntax.
        But there‚Äôs more to Xcode build configuration files than meets the eye.
        &lt;em&gt;Behold!&lt;/em&gt;&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;retaining-existing-values&quot; href=&quot;#retaining-existing-values&quot;&gt;&lt;/a&gt;Retaining Existing Values&lt;/h3&gt;
        &lt;p&gt;To append rather than replace existing definitions,
        use the &lt;code&gt;$(inherited)&lt;/code&gt; variable like so:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;var class=&quot;placeholder&quot;&gt;additional value&lt;/var&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;You typically do this to build up lists of values,
        such as the paths in which
        the compiler searches for frameworks
        to find included header files
        (&lt;code&gt;FRAMEWORK_SEARCH_PATHS&lt;/code&gt;):&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;FRAMEWORK_SEARCH_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Xcode assigns inherited values in the following order
        (from lowest to highest precedence):&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Platform Defaults&lt;/li&gt;
        &lt;li&gt;Xcode Project xcconfig File&lt;/li&gt;
        &lt;li&gt;Xcode Project File Build Settings&lt;/li&gt;
        &lt;li&gt;Target xcconfig File&lt;/li&gt;
        &lt;li&gt;Target Build Settings&lt;/li&gt;
        &lt;/ul&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Spaces are used to delimit items in string and path lists.
        To specify an item containing whitespace,
        you must enclose it with quotation marks (&lt;code&gt;&quot;&lt;/code&gt;).&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;referencing-values&quot; href=&quot;#referencing-values&quot;&gt;&lt;/a&gt;Referencing Values&lt;/h3&gt;
        &lt;p&gt;You can substitute values from other settings
        by their declaration name
        with the following syntax:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;var class=&quot;placeholder&quot;&gt;ANOTHER_BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Substitutions can be used to
        define new variables according to existing values,
        or inline to build up new values dynamically.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;OBJROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;SYMROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;CONFIGURATION_BUILD_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;BUILD_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;CONFIGURATION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;PLATFORM_NAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;setting-fallback-values-for-referenced-build-settings&quot; href=&quot;#setting-fallback-values-for-referenced-build-settings&quot;&gt;&lt;/a&gt;Setting Fallback Values for Referenced Build Settings&lt;/h3&gt;
        &lt;p&gt;In Xcode 11.4 and later,
        you can use the &lt;code&gt;default&lt;/code&gt; evaluation operator
        to specify a fallback value to use
        if the referenced build setting evaluates as empty.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;var class=&quot;placeholder&quot;&gt;value&lt;/var&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;conditionalizing-build-settings&quot; href=&quot;#conditionalizing-build-settings&quot;&gt;&lt;/a&gt;Conditionalizing Build Settings&lt;/h3&gt;
        &lt;p&gt;You can conditionalize build settings according to their
        SDK (&lt;code&gt;sdk&lt;/code&gt;), architecture (&lt;code&gt;arch&lt;/code&gt;), and / or configuration (&lt;code&gt;config&lt;/code&gt;)
        according to the following syntax:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sdk=&lt;var class=&quot;placeholder&quot;&gt;sdk&lt;/var&gt;] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;value for specified sdk&lt;/var&gt;&lt;/span&gt;
        &lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;arch=&lt;var class=&quot;placeholder&quot;&gt;architecture&lt;/var&gt;] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;value for specified architecture&lt;/var&gt;&lt;/span&gt;
        &lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;config=&lt;var class=&quot;placeholder&quot;&gt;configuration&lt;/var&gt;] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;value for specified configuration&lt;/var&gt;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Given a choice between multiple definitions of the same build setting,
        the compiler resolves according to specificity.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sdk=&lt;var class=&quot;placeholder&quot;&gt;sdk&lt;/var&gt;][arch=&lt;var class=&quot;placeholder&quot;&gt;architecture&lt;/var&gt;] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;value for specified sdk and architectures&lt;/var&gt;&lt;/span&gt;
        &lt;var class=&quot;placeholder&quot;&gt;BUILD_SETTING_NAME&lt;/var&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sdk=*][arch=&lt;var class=&quot;placeholder&quot;&gt;architecture&lt;/var&gt;] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;value for all other sdks with specified architecture&lt;/var&gt;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;For example,
        you might specify the following build setting
        to speed up local builds by only compiling for the active architecture:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;ONLY_ACTIVE_ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;config=Debug][sdk=*][arch=*] &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;including-build-settings-from-other-configuration-files&quot; href=&quot;#including-build-settings-from-other-configuration-files&quot;&gt;&lt;/a&gt;Including Build Settings from Other Configuration Files&lt;/h3&gt;
        &lt;p&gt;A build configuration file can include settings from other configuration files
        using the same &lt;code&gt;#include&lt;/code&gt; syntax
        as the equivalent &lt;code&gt;C&lt;/code&gt; directive
        on which this functionality is based:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;&lt;var class=&quot;placeholder&quot;&gt;path/to/File.xcconfig&lt;/var&gt;&quot;
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;As we‚Äôll see later on in the article,
        you can take advantage of this to build up cascading lists of build settings
        in really powerful ways.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Normally when the compiler encounters an &lt;code&gt;#include&lt;/code&gt; directive
        that can‚Äôt be resolved,
        it raises an error.
        But &lt;code&gt;xcconfig&lt;/code&gt; files also support an &lt;code&gt;#include?&lt;/code&gt; directive,
        that doesn‚Äôt complain if the file can‚Äôt be found.&lt;/p&gt;
        &lt;p&gt;There aren‚Äôt many cases in which you‚Äôd want
        the existence or nonexistence of a file
        to change compile-time behavior;
        after all, builds are best when they‚Äôre predictable.
        But you might use this
        as a hook for optional development tools like &lt;a href=&quot;https://revealapp.com/&quot; rel=&quot;noopener noreferrer&quot;&gt;Reveal&lt;/a&gt;,
        which requires the following configuration:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# Reveal.xcconfig
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;OTHER_LDFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-weak_framework&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Reveal&lt;wbr&gt;&lt;/wbr&gt;Server&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;FRAMEWORK_SEARCH_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/Applications/Reveal.app/Contents/Shared&lt;wbr&gt;&lt;/wbr&gt;Support/i&lt;wbr&gt;&lt;/wbr&gt;OS-Libraries&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;/aside&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;creating-build-configuration-files&quot; href=&quot;#creating-build-configuration-files&quot;&gt;&lt;/a&gt;Creating Build Configuration Files&lt;/h2&gt;
        &lt;p&gt;To create a build configuration file,
        select the ‚ÄúFile &amp;gt; New File‚Ä¶‚Äù menu item (&lt;kbd&gt;‚åò&lt;/kbd&gt;&lt;kbd&gt;N&lt;/kbd&gt;),
        scroll down to the section labeled ‚ÄúOther‚Äù,
        and select the Configuration Settings File template.
        Next, save it somewhere in your project directory,
        making sure to add it to your desired targets&lt;/p&gt;
        &lt;picture&gt;
        &lt;source srcset=&quot;/assets/xcconfig-new-file--dark-634ea6d9c8b32c825cf6e9edc66807943d5650a5bfc2cc081d0fe4d37c49c9ad.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&lt;/source&gt;
        &lt;img src=&quot;/assets/xcconfig-new-file--light-1569134f8ecaeaee6640f28e544443da0136ff72b00f9343126147934ac134d4.png&quot; alt=&quot;Xcode new configuration file&quot;&gt;
        &lt;/picture&gt;
        &lt;p&gt;Once you‚Äôve created an &lt;code&gt;xcconfig&lt;/code&gt; file,
        you can assign it to one or more build configurations
        for its associated targets.&lt;/p&gt;
        &lt;picture&gt;
        &lt;source srcset=&quot;/assets/xcconfig-project-configurations--dark-61210a47703d2f987efe90262006132f06415f2d15c68f7d719c728188995343.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&lt;/source&gt;
        &lt;img src=&quot;/assets/xcconfig-project-configurations--light-a82440e27f27e3b139ab51c7317780c6b4a017dfcc56532972da5d521f1f0988.png&quot; alt=&quot;Xcode project configuration&quot;&gt;
        &lt;/picture&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Build configuration files shouldn‚Äôt be included in any of your project‚Äôs targets.
        If you find any &lt;code&gt;.xcconfig&lt;/code&gt; files showing up in your app‚Äôs &lt;code&gt;.ipa&lt;/code&gt; archive,
        make sure that they aren‚Äôt a member of any targets
        and don‚Äôt appear in any ‚ÄúCopy Bundle Resources‚Äù build phases.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;Now that we‚Äôve covered the basics of using Xcode build configuration files
        let‚Äôs look at a couple of examples of how you can use them
        to manage development, stage, and production environments.&lt;/p&gt;
        &lt;hr&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;customizing-app-name-and-icon-for-internal-builds&quot; href=&quot;#customizing-app-name-and-icon-for-internal-builds&quot;&gt;&lt;/a&gt;Customizing App Name and Icon for Internal Builds&lt;/h2&gt;
        &lt;p&gt;Developing an iOS app usually involves
        juggling various internal builds
        on your simulators and test devices
        (as well as the latest version from the App Store,
        to use as a reference).&lt;/p&gt;
        &lt;p&gt;You can make things easier on yourself
        with &lt;code&gt;xcconfig&lt;/code&gt; files that assign each configuration
        a distinct name and app icon.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Development.xcconfig&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;PRODUCT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Œ±&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;App&lt;wbr&gt;&lt;/wbr&gt;Icon-Alpha&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////////&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Staging.xcconfig&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;PRODUCT_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;inherited&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Œ≤&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;ASSETCATALOG_COMPILER_APPICON_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;App&lt;wbr&gt;&lt;/wbr&gt;Icon-Beta&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;managing-constants-across-different-environments&quot; href=&quot;#managing-constants-across-different-environments&quot;&gt;&lt;/a&gt;Managing Constants Across Different Environments&lt;/h2&gt;
        &lt;p&gt;If your backend developers comport themselves according to the aforementioned
        &lt;a href=&quot;https://12factor.net/config&quot; rel=&quot;noopener noreferrer&quot;&gt;12 Factor App&lt;/a&gt; philosophy,
        then they‚Äôll have separate endpoints for
        development, stage, and production environments.&lt;/p&gt;
        &lt;p&gt;On iOS,
        perhaps the most common approach to managing these environments
        is to use conditional compilation statements
        with build settings like &lt;code&gt;DEBUG&lt;/code&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#if DEBUG&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;api&lt;wbr&gt;&lt;/wbr&gt;Base&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.staging.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;api&lt;wbr&gt;&lt;/wbr&gt;Base&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;This gets the job done,
        but runs afoul of the canon of code / configuration separation.&lt;/p&gt;
        &lt;p&gt;An alternative approach takes these environment-specific values
        and puts them where they belong ‚Äî
        into &lt;code&gt;xcconfig&lt;/code&gt; files.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Xcode Build Settings&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Development.xcconfig&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;API_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;api.staging.example.com&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Production.xcconfig&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;API_BASE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;api.example.com&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;&lt;code&gt;xcconfig&lt;/code&gt; files treat the sequence
        &lt;code&gt;//&lt;/code&gt; as a comment delimiter,
        regardless of whether it‚Äôs enclosed in quotation marks.
        If you try to escape with backslashes &lt;code&gt;\/\/&lt;/code&gt;,
        those backslashes show up literally
        and must be removed from the resulting value.
        This is especially inconvenient when specifying per-environment URL constants.&lt;/p&gt;
        &lt;p&gt;If you‚Äôd rather not work around this unfortunate behavior,
        you can always omit the scheme and prepend &lt;code&gt;https://&lt;/code&gt; in code.
        &lt;em&gt;(You are using https‚Ä¶ right?)&lt;/em&gt;&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;However,
        to pull these values programmatically,
        we‚Äôll need to take one additional step:&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;accessing-build-settings-from-swift&quot; href=&quot;#accessing-build-settings-from-swift&quot;&gt;&lt;/a&gt;Accessing Build Settings from Swift&lt;/h3&gt;
        &lt;p&gt;Build settings defined by
        the Xcode project file, &lt;code&gt;xcconfig&lt;/code&gt; files, and environment variables,
        are only available at build time.
        When you run the compiled app,
        none of that surrounding context is available.
        &lt;em&gt;(And thank goodness for that!)&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;But wait a sec ‚Äî
        don‚Äôt you remember seeing some of those build settings before
        in one of those other tabs?
        Info, was it?&lt;/p&gt;
        &lt;p&gt;As it so happens,
        that info tab is actually just a fancy presentation of
        the target‚Äôs &lt;code&gt;Info.plist&lt;/code&gt; file.
        At build time,
        that &lt;code&gt;Info.plist&lt;/code&gt; file is compiled
        according to the build settings provided
        and copied into the resulting app &lt;a href=&quot;/bundles-and-packages/&quot;&gt;bundle&lt;/a&gt;.
        Therefore,
        by adding references to &lt;code&gt;$(API_BASE_URL)&lt;/code&gt;,
        you can access the values for those settings
        through the &lt;code&gt;info&lt;wbr&gt;&lt;/wbr&gt;Dictionary&lt;/code&gt; property of Foundation‚Äôs &lt;code&gt;Bundle&lt;/code&gt; API.
        &lt;em&gt;Neat!&lt;/em&gt;&lt;/p&gt;
        &lt;picture&gt;
        &lt;source srcset=&quot;/assets/xcconfig-project-info-plist--dark-de7dfd79b9d23bd111cbab3b268626b74b6f5a70c9bc53e3a0466aa2e5b36df6.png&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;&lt;/source&gt;
        &lt;img src=&quot;/assets/xcconfig-project-info-plist--light-9bf503aa924ea851548f74ba3007aed1e9cd732f0f2a1861ca57ef9934fafbf5.png&quot; alt=&quot;Xcode Info.plist&quot;&gt;
        &lt;/picture&gt;
        &lt;p&gt;Following this approach,
        we might do something like the following:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Foundation&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invalid&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lossless&lt;wbr&gt;&lt;/wbr&gt;String&lt;wbr&gt;&lt;/wbr&gt;Convertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;wbr&gt;&lt;/wbr&gt;Info&lt;wbr&gt;&lt;/wbr&gt;Dictionary&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missing&lt;wbr&gt;&lt;/wbr&gt;Key&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fallthrough&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;base&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;API_BASE_URL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;When viewed from the call site,
        we find that this approach harmonizes beautifully
        with our best practices ‚Äî
        not a single hard-coded constant in sight!&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;relative&lt;wbr&gt;&lt;/wbr&gt;To&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;wbr&gt;&lt;/wbr&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;wbr&gt;&lt;/wbr&gt;Method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition error&quot;&gt;
        &lt;p&gt;Don‚Äôt use &lt;code&gt;xcconfig&lt;/code&gt; files to store secrets like API keys or other credentials
        For more information,
        please refer to our article about &lt;a href=&quot;/secrets/&quot;&gt;secret mangement on iOS&lt;/a&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;Xcode projects are monolithic, fragile, and opaque.
        They‚Äôre a source of friction for collaboration among team members
        and generally a drag to work with.&lt;/p&gt;
        &lt;p&gt;Fortunately,
        &lt;code&gt;xcconfig&lt;/code&gt; files go a long way to address these pain points.
        Moving configuration out of Xcode and into &lt;code&gt;xcconfig&lt;/code&gt; files
        confers a multitude of benefits
        and offers a way to distance your project from the particulars of Xcode
        without leaving the Cupertino-approved ‚Äúhappy path‚Äù.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Xcode" />
      <summary type="html">&lt;p&gt;Software development best practices prescribe strict separation of configuration from code. Learn how you can use &lt;code&gt;xcconfig&lt;/code&gt; files to make your Xcode projects more compact, comprehensible, and powerful.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">Static and Dynamic Callable Types in Swift</title>
      <link href="https://nshipster.com/callable/" rel="alternate" type="text/html" title="Static and Dynamic Callable Types in Swift" />
      <published>2020-02-12T00:00:00-08:00</published>
      <updated>2020-02-12T00:00:00-08:00</updated>
      <id>https://nshipster.com/callable</id>
      <content type="html" xml:base="https://nshipster.com/callable/">
        &lt;p&gt;Last week,
        Apple released the &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_11_4_beta_release_notes&quot; rel=&quot;noopener noreferrer&quot;&gt;first beta of Xcode 11.4&lt;/a&gt;,
        and it‚Äôs proving to be one of the most substantial updates in recent memory.
        &lt;code&gt;XCTest&lt;/code&gt; got &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_11_4_beta_release_notes#3530390&quot; rel=&quot;noopener noreferrer&quot;&gt;a huge boost&lt;/a&gt;,
        with numerous quality of life improvements,
        and &lt;a href=&quot;https://developer.apple.com/documentation/xcode_release_notes/xcode_11_4_beta_release_notes#3530393&quot; rel=&quot;noopener noreferrer&quot;&gt;Simulator&lt;/a&gt;, likewise, got a solid dose of
        &lt;abbr title=&quot;tender loving care&quot;&gt;TLC&lt;/abbr&gt;.
        But it‚Äôs the changes to Swift that are getting the lion‚Äôs share of attention.&lt;/p&gt;
        &lt;p&gt;In Xcode 11.4,
        Swift compile times are down across the board,
        with many developers reporting improvements of 10 ‚Äì 20% in their projects.
        And thanks to a &lt;a href=&quot;https://swift.org/blog/new-diagnostic-arch-overview/&quot; title=&quot;Swift.org - New Diagnostic Architecture Overview&quot; rel=&quot;noopener noreferrer&quot;&gt;new diagnostics architecture&lt;/a&gt;,
        error messages from the compiler are consistently more helpful.
        This is also the first version of Xcode to ship with the new
        &lt;a href=&quot;/language-server-protocol/&quot;&gt;&lt;code&gt;sourcekit-lsp&lt;/code&gt; server&lt;/a&gt;,
        which serves to empower editors like &lt;a href=&quot;/vscode/&quot;&gt;VSCode&lt;/a&gt;
        to work with Swift in a more meaningful way.&lt;/p&gt;
        &lt;p&gt;Yet,
        despite all of these improvements
        (which are truly an incredible achievement by Apple‚Äôs Developer Tools team),
        much of the early feedback has focused on
        the most visible additions to Swift 5.2.
        And the response from the peanut galleries of
        Twitter, Hacker News, and Reddit has been ‚Äî
        to put it charitably ‚Äî &lt;em&gt;‚Äúmixed‚Äù&lt;/em&gt;.&lt;/p&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;If like most of us,
        you aren‚Äôt tuned into the comings-and-goings of &lt;a href=&quot;https://apple.github.io/swift-evolution/&quot; title=&quot;Swift Evolution Proposals Dashboard&quot; rel=&quot;noopener noreferrer&quot;&gt;Swift Evolution&lt;/a&gt;,
        Xcode 11.4 was your first exposure to two new additions to the language:
        &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md&quot; title=&quot;SE-0249: Key Path Expressions as Functions&quot; rel=&quot;noopener noreferrer&quot;&gt;key path expressions as functions&lt;/a&gt; 
        and
        &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md&quot; title=&quot;SE-0253: Callable values of user-defined nominal types&quot; rel=&quot;noopener noreferrer&quot;&gt;callable values of user-defined nominal types&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;The first of these allows key paths to replace
        one-off closures used by functions like &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift &amp;gt;= 5.2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;üßÅüç≠üç¶&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// [&quot;CUPCAKE&quot;, &quot;LOLLIPOP&quot;, &quot;SOFT ICE CREAM&quot;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swift &amp;lt;5.2 equivalent&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;üßÅüç≠üç¶&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;The second allows instances of types with a method named &lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/code&gt;
        to be called as if they were a function:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sweetener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;additives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Character&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;additives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat&lt;wbr&gt;&lt;/wbr&gt;Map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;additives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random&lt;wbr&gt;&lt;/wbr&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;üòã&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dessertify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sweetener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;üßÅüç≠üç¶&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;dessertify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// &quot;Hello, üç≠ world! üç¶üòã&quot;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;hr&gt;
        &lt;p&gt;Granted,
        both of those examples are terrible.
        And that‚Äôs kinda the problem.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;Too often,
        coverage of &lt;em&gt;‚ÄúWhat‚Äôs New In Swift‚Äù&lt;/em&gt;
        amounts to little more than a regurgitation of Swift Evolution proposals,
        interspersed with poorly motivated (and often emoji-laden) examples.
        Such treatments provide a poor characterization of Swift language features,
        and ‚Äî in the case of Swift 5.2 ‚Äî
        serves to feed into the popular critique that these are frivolous additions ‚Äî
        mere &lt;dfn&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Syntactic_sugar&quot; rel=&quot;noopener noreferrer&quot;&gt;syntactic sugar&lt;/a&gt;&lt;/dfn&gt;.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;To the extent that we‚Äôve been guilty of that‚Ä¶
        our bad &lt;span lang=&quot;und-Zsye&quot;&gt;üôá‚Äç‚ôÇÔ∏è&lt;/span&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;This week,
        we hope to reach the ooey gooey center of the issue
        by providing some historical and theoretical context
        for understanding these new features.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;syntactic-sugar-in-swift&quot; href=&quot;#syntactic-sugar-in-swift&quot;&gt;&lt;/a&gt;Syntactic Sugar in Swift&lt;/h2&gt;
        &lt;p&gt;If you‚Äôre salty about ‚Äúkey path as function‚Äù being too sugary,
        recall that the &lt;span lang=&quot;la&quot;&gt;status quo&lt;/span&gt;
        isn‚Äôt without a sweet tooth.
        Consider our saccharine example from before:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;üßÅüç≠üç¶&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;That expression relies on at least four different syntactic concessions:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;
        &lt;strong&gt;Trailing closure syntax&lt;/strong&gt;,
        which allows a final closure argument label of a function to be omitted&lt;/li&gt;
        &lt;li&gt;
        &lt;strong&gt;Anonymous closure arguments&lt;/strong&gt;,
        which allow arguments in closures to be used positionally (&lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, ‚Ä¶)
        without binding to a named variable.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Inferred parameter and return value types&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Implicit return from single-expression closures&lt;/strong&gt;&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;If you wanted to cut sugar out of your diet completely,
        you‚Äôd best get &lt;a href=&quot;https://en.wikipedia.org/wiki/Mavis_Beacon_Teaches_Typing&quot; title=&quot;Mavis Beacon Teaches Typing&quot; rel=&quot;noopener noreferrer&quot;&gt;Mavis Beacon&lt;/a&gt; on the line,
        because you‚Äôll be doing a lot more &lt;a href=&quot;/rawrepresentable/&quot;&gt;typing&lt;/a&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;üßÅüç≠üç¶&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode&lt;wbr&gt;&lt;/wbr&gt;Scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;Also, who knew that the argument label in &lt;code&gt;map&lt;/code&gt; was ‚Äútransform‚Äù?&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;In fact,
        as we‚Äôll see in the examples to come,
        Swift is a marshmallow world in the winter,
        &lt;em&gt;syntactically speaking&lt;/em&gt;.
        From initializers and method calls to optionals and method chaining,
        nearly everything about Swift could be described as a cotton candy melody ‚Äî
        it really just depends on where you draw the line between
        ‚Äúlanguage feature‚Äù and ‚Äúsyntactic sugar‚Äù.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;To understand why,
        you have to understand how we got here in the first place,
        which requires a bit of history, math, and computer science.
        Get ready to eat your vegetables ü•¶.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;the-calculus-and-speculative-computer-science-fiction&quot; href=&quot;#the-calculus-and-speculative-computer-science-fiction&quot;&gt;&lt;/a&gt;The Œª-Calculus and Speculative Computer Science Fiction&lt;/h2&gt;
        &lt;p&gt;All programming languages can be seen as various attempts to represent
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot; rel=&quot;noopener noreferrer&quot;&gt;the &lt;abbr lang=&quot;la&quot; title=&quot;lambda&quot;&gt;Œª&lt;/abbr&gt;-calculus&lt;/a&gt;.
        Everything you need to write code ‚Äî
        variables, binding, application ‚Äî
        it‚Äôs all in there,
        buried under a mass of Greek letters and mathematical notation.&lt;/p&gt;
        &lt;p&gt;Setting aside syntactic differences,
        each programming language can be understood by
        its combination of affordances for
        making programs easier to write and easier to read.
        Language features like
        objects,
        classes,
        modules,
        optionals,
        literals,
        and generics
        are all just abstractions built on top of the Œª-calculus.&lt;/p&gt;
        &lt;p&gt;Any other deviation from pure mathematical formalism
        can be ascribed to real-world constraints,
        such as
        &lt;a href=&quot;https://en.wikipedia.org/wiki/QWERTY&quot; title=&quot;QWERTY&quot; rel=&quot;noopener noreferrer&quot;&gt;a typewriter from the 1870s&lt;/a&gt;,
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Punched_card#IBM_80-column_punched_card_format_and_character_codes&quot; rel=&quot;noopener noreferrer&quot;&gt;a punch card from the 1920s&lt;/a&gt;,
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Von_Neumann_architecture&quot; title=&quot;Von Neumann Architecture&quot; rel=&quot;noopener noreferrer&quot;&gt;a computer architecture from the 1940s&lt;/a&gt;,
        or &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot; rel=&quot;noopener noreferrer&quot;&gt;a character encoding from the 1960s&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;Among the earliest programming languages were Lisp, ALGOL*, and COBOL,
        from which nearly every other language derives.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;We‚Äôre using FORTRAN as a stand-in here,
        for lack of an easily-accessible ALGOL environment.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;div class=&quot;highlight-group&quot;&gt;
        &lt;div role=&quot;tablist&quot; aria-label=&quot;Languages&quot;&gt;
        &lt;button role=&quot;tab&quot; id=&quot;code-listing-1-lisp-tab&quot; class=&quot;lisp&quot; aria-label=&quot;Languages&quot; aria-controls=&quot;code-listing-1-lisp&quot; aria-selected=&quot;true&quot; tabindex=&quot;-1&quot;&gt;
        Lisp
        &lt;/button&gt;
        &lt;button role=&quot;tab&quot; id=&quot;code-listing-1-fortran-tab&quot; class=&quot;fortran&quot; aria-label=&quot;Languages&quot; aria-controls=&quot;code-listing-1-fortran&quot; aria-selected=&quot;false&quot; tabindex=&quot;-1&quot;&gt;
        FORTRAN
        &lt;/button&gt;
        &lt;button role=&quot;tab&quot; id=&quot;code-listing-1-cobol-tab&quot; class=&quot;cobol&quot; aria-label=&quot;Languages&quot; aria-controls=&quot;code-listing-1-cobol&quot; aria-selected=&quot;false&quot; tabindex=&quot;-1&quot;&gt;
        COBOL
        &lt;/button&gt;
        &lt;/div&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Lisp&quot; id=&quot;code-listing-1-lisp&quot; role=&quot;tabpanel&quot; tabindex=&quot;0&quot; aria-labelledby=&quot;code-listing-1-lisp-tab&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;;; 16&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;FORTRAN&quot; id=&quot;code-listing-1-fortran&quot; role=&quot;tabpanel&quot; tabindex=&quot;0&quot; aria-labelledby=&quot;code-listing-1-fortran-tab&quot; hidden=&quot;hidden&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;! 16&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;COBOL&quot; id=&quot;code-listing-1-cobol&quot; role=&quot;tabpanel&quot; tabindex=&quot;0&quot; aria-labelledby=&quot;code-listing-1-cobol-tab&quot; hidden=&quot;hidden&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IDENTIFICATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROGRAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WORKING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORAGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;PIC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;PIC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CALL&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;square&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USING&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTENT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REFERENCE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DISPLAY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;STOP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RUN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IDENTIFICATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROGRAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LINKAGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;PIC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;PIC&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVISION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MULTIPLY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GIVING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EXIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;* 016000000&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;Here you get a glimpse into three very different timelines;
        ours is the reality in which ALGOL‚Äôs syntax (option #2)
        ‚Äúwon out‚Äù over the alternatives.
        From ALGOL 60,
        you can draw a straight line from
        &lt;a href=&quot;https://en.wikipedia.org/wiki/CPL_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;CPL&lt;/a&gt; in 1963,
        to &lt;a href=&quot;https://en.wikipedia.org/wiki/BCPL&quot; rel=&quot;noopener noreferrer&quot;&gt;BCPL&lt;/a&gt; in 1967
        and &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot; rel=&quot;noopener noreferrer&quot;&gt;C&lt;/a&gt; in 1972,
        followed by &lt;a href=&quot;/direct/#object-oriented-programming&quot;&gt;Objective-C in 1984&lt;/a&gt;
        and Swift in 2014.
        That‚Äôs the lineage that informs what types are callable and how we call them.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;&lt;em&gt;Now, back to Swift‚Ä¶&lt;/em&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;function-types-in-swift&quot; href=&quot;#function-types-in-swift&quot;&gt;&lt;/a&gt;Function Types in Swift&lt;/h2&gt;
        &lt;p&gt;Functions are first-class objects in Swift,
        meaning that they can be assigned to variables,
        stored in properties,
        and passed as arguments or returned as values from other functions.&lt;/p&gt;
        &lt;p&gt;What distinguishes function types from other values
        is that they‚Äôre &lt;dfn&gt;callable&lt;/dfn&gt;,
        meaning that you can invoke them to produce new values.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;closures&quot; href=&quot;#closures&quot;&gt;&lt;/a&gt;Closures&lt;/h3&gt;
        &lt;p&gt;Swift‚Äôs fundamental function type is the &lt;dfn&gt;closure&lt;/dfn&gt;,
        a self-contained unit of functionality.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;As a function type,
        you can call a closure by passing the requisite number of arguments
        between opening and closing parentheses &lt;code&gt;()&lt;/code&gt; ‚Äî
        &lt;em lang=&quot;fr&quot;&gt;a la&lt;/em&gt; ALGOL.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 16&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;The number of arguments taken by a function type
        is known as its &lt;dfn&gt;arity&lt;/dfn&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Closures are so called because they &lt;dfn&gt;close over&lt;/dfn&gt; and capture
        references to any variables from the context in which they‚Äôre defined.
        However, capturing semantics aren‚Äôt always desirable,
        which is why Swift provides dedicated syntax to a special kind of closure
        known as a &lt;dfn&gt;function&lt;/dfn&gt;.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;functions&quot; href=&quot;#functions&quot;&gt;&lt;/a&gt;Functions&lt;/h3&gt;
        &lt;p&gt;Functions defined at a top-level / global scope
        are named closures that don‚Äôt capture any values.
        In Swift,
        you declare them with the &lt;code&gt;func&lt;/code&gt; keyword:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 16&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Compared to closures,
        functions have greater flexibility in how arguments are passed.&lt;/p&gt;
        &lt;p&gt;Function arguments can have named labels
        instead of a closure‚Äôs unlabeled, positional arguments ‚Äî
        which goes a long way to clarify the effect of code at its call site:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1000.00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Functions can be &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Generics.html&quot; title=&quot;The Swift Programming Language - Generics&quot; rel=&quot;noopener noreferrer&quot;&gt;generic&lt;/a&gt;,
        allowing them to be used for multiple types of arguments:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Numeric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Numeric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 25 ((4 + 1)¬≤)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 27.04 ((4.2 + 1)¬≤)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Functions can also take variadic arguments,
        implicit closures,
        and default argument values
        (allowing for magic expression literals like &lt;code&gt;#file&lt;/code&gt; and &lt;code&gt;#line&lt;/code&gt;):&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@autoclosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@autoclosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Static&lt;wbr&gt;&lt;/wbr&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;And yet,
        despite all of this flexibility for accepting arguments,
        most functions you‚Äôll encounter operate on an &lt;em&gt;implicit&lt;/em&gt; &lt;code&gt;self&lt;/code&gt; argument.
        These functions are called methods.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;methods&quot; href=&quot;#methods&quot;&gt;&lt;/a&gt;Methods&lt;/h3&gt;
        &lt;p&gt;A &lt;dfn&gt;method&lt;/dfn&gt; is a function contained by a type.
        Methods automatically provide access to &lt;code&gt;self&lt;/code&gt;,
        allowing them to effectively capture the instance on which they‚Äôre called
        as an implicit argument.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new&lt;wbr&gt;&lt;/wbr&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;wbr&gt;&lt;/wbr&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;wbr&gt;&lt;/wbr&gt;Empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;wbr&gt;&lt;/wbr&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Swift goes one step further
        by allowing &lt;code&gt;self.&lt;/code&gt; to be omitted for member access ‚Äî
        making the already implicit &lt;code&gt;self&lt;/code&gt; all the more implicit.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;Putting everything together,
        these syntactic affordances allow Swift code to be
        expressive, clear, and concise:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Compared to more verbose languages like Objective-C,
        the experience of writing Swift is, well, pretty &lt;em&gt;sweet&lt;/em&gt;.
        It‚Äôs hard to imagine any Swift developers objecting to what we have here 
        as being ‚Äúsugar-coated‚Äù.&lt;/p&gt;
        &lt;p&gt;But like a 16oz can of &lt;a href=&quot;https://en.wikipedia.org/wiki/Surge_(drink)&quot; title=&quot;SURGE&quot; rel=&quot;noopener noreferrer&quot;&gt;Surge&lt;/a&gt;,
        the sugar content of something is often surprising.
        Turns out, 
        that example from before is far from innocent:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// desugars to `Queue&amp;lt;Int&amp;gt;.init()`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// desugars to `Queue.push(&amp;amp;queue)(1)`&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;All this time,
        our so-called ‚Äúdirect‚Äù calls to methods and initializers
        were actually shorthand for &lt;del&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot; rel=&quot;noopener noreferrer&quot;&gt;function currying&lt;/a&gt;&lt;/del&gt;
        &lt;ins&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot; rel=&quot;noopener noreferrer&quot;&gt;partially-applied functions&lt;/a&gt;&lt;/ins&gt;.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;Partial application and currying are often conflated.
        In fact, 
        &lt;a href=&quot;https://ericasadun.com/2017/04/03/musings-on-partial-application/&quot; rel=&quot;noopener noreferrer&quot;&gt;they‚Äôre distinct but related concepts&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;Early versions of Swift had a dedicated syntax for currying functions,
        but it proved less useful than originally anticipated
        and was removed by the &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md&quot; title=&quot;SE-0002: Removing currying func declaration syntax&quot; rel=&quot;noopener noreferrer&quot;&gt;second-ever Swift Evolution proposal&lt;/a&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Swift &amp;lt;3:&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;curried&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swift &amp;gt;=3&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;curried&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;/aside&gt;
        &lt;p&gt;With this in mind,
        let‚Äôs now take another look at callable types in Swift more generally.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;type-instance-member-static-dynamic&quot; href=&quot;#type-instance-member-static-dynamic&quot;&gt;&lt;/a&gt;{Type, Instance, Member} ‚®Ø {Static, Dynamic}&lt;/h2&gt;
        &lt;p&gt;Since their introduction in Swift 4.2 and Swift 5, respectively,
        many developers have had a hard time keeping
        &lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/code&gt; and &lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Callable&lt;/code&gt;
        straight in their minds ‚Äî
        made even more difficult by the introduction of &lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/code&gt; in Swift 5.2.&lt;/p&gt;
        &lt;p&gt;If you‚Äôre also confused,
        we think the following table can help clear things up:&lt;/p&gt;
        &lt;table&gt;
        &lt;thead&gt;
        &lt;tr&gt;
        &lt;th&gt;¬†&lt;/th&gt;
        &lt;th&gt;Static&lt;/th&gt;
        &lt;th&gt;Dynamic&lt;/th&gt;
        &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;td&gt;Type&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;init&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Instance&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;&lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;&lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Callable&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;Member&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;func&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;strong&gt;&lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;p&gt;Swift has always had static callable types and type members.
        What‚Äôs changed in new versions of Swift
        is that instances are now callable,
        and both instances and members can now be called dynamically.&lt;/p&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;You might have noticed the blank spot in our table.
        Indeed, there‚Äôs no way to dynamically call types.
        In fact, there‚Äôs no way to statically call types
        other than to invoke initializers ‚Äî
        and that‚Äôs probably for the best.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;Let‚Äôs see what that means in practice,
        starting with static callables.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;static-callable&quot; href=&quot;#static-callable&quot;&gt;&lt;/a&gt;Static Callable&lt;/h3&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Static&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;This type can be called statically in the following ways:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∂&lt;/var&gt; desugars to `Static.init()`&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∑&lt;/var&gt; (no syntactic sugar!)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∏&lt;/var&gt; desugars to Static.function(instance)()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ùπ&lt;/var&gt; desugars to `Static.call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function(instance)()`&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;dl&gt;
        &lt;dt&gt;‚ù∂&lt;/dt&gt;
        &lt;dd&gt;Calling the &lt;code&gt;Static&lt;/code&gt; type invokes an initializer&lt;/dd&gt;
        &lt;dt&gt;‚ù∑&lt;/dt&gt;
        &lt;dd&gt;Calling &lt;code&gt;function&lt;/code&gt; on the &lt;code&gt;Static&lt;/code&gt; type
        invokes the corresponding static function member,
        passing &lt;code&gt;Static&lt;/code&gt; as an implicit &lt;code&gt;self&lt;/code&gt; argument.&lt;/dd&gt;
        &lt;dt&gt;‚ù∏&lt;/dt&gt;
        &lt;dd&gt;Calling &lt;code&gt;function&lt;/code&gt; on an instance of &lt;code&gt;Static&lt;/code&gt;
        invokes the corresponding function member,
        passing the instance as an implicit &lt;code&gt;self&lt;/code&gt; argument.&lt;/dd&gt;
        &lt;dt&gt;‚ùπ&lt;/dt&gt;
        &lt;dd&gt;Calling an instance of &lt;code&gt;Static&lt;/code&gt;
        invokes the &lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function()&lt;/code&gt; function member,
        passing the instance as an implicit &lt;code&gt;self&lt;/code&gt; argument.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;A few points for completeness‚Äô sake:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;You can also statically call subscripts and variable members (properties).&lt;/li&gt;
        &lt;li&gt;Operators provide an alternative way to invoke static member functions.&lt;/li&gt;
        &lt;li&gt;Enumeration cases are, well‚Ä¶ 
        something else entirely.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;!-- Interestingly,
        [a draft proposal](https://forums.swift.org/t/enum-cases-as-protocol-witnesses/32753/19)
        to allow enumeration cases to be treated as protocol witnesses
        is currently making the rounds on the Swift forums. --&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;dynamic-callable&quot; href=&quot;#dynamic-callable&quot;&gt;&lt;/a&gt;Dynamic Callable&lt;/h3&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Callable&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dynamic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamically&lt;wbr&gt;&lt;/wbr&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;wbr&gt;&lt;/wbr&gt;Arguments&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamically&lt;wbr&gt;&lt;/wbr&gt;Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;wbr&gt;&lt;/wbr&gt;Keyword&lt;wbr&gt;&lt;/wbr&gt;Arguments&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;wbr&gt;&lt;/wbr&gt;Value&lt;wbr&gt;&lt;/wbr&gt;Pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;This type can be called dynamically in a few different ways:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// desugars to `Dynamic.init()`&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∂&lt;/var&gt; desugars to `Dynamic.dynamically&lt;wbr&gt;&lt;/wbr&gt;Call(instance)(with&lt;wbr&gt;&lt;/wbr&gt;Arguments: [1])`&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∑&lt;/var&gt; desugars to `Dynamic.dynamically&lt;wbr&gt;&lt;/wbr&gt;Call(instance)(with&lt;wbr&gt;&lt;/wbr&gt;Keyword&lt;wbr&gt;&lt;/wbr&gt;Arguments: [&quot;a&quot;: 1])`&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ù∏&lt;/var&gt; desugars to `Dynamic[dynamic&lt;wbr&gt;&lt;/wbr&gt;Member: &quot;function&quot;](1)`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &lt;var class=&quot;placeholder&quot;&gt;‚ùπ&lt;/var&gt; desugars to `instance[dynamic&lt;wbr&gt;&lt;/wbr&gt;Member: &quot;function&quot;](1)`&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;dl&gt;
        &lt;dt&gt;‚ù∂&lt;/dt&gt;
        &lt;dd&gt;Calling an instance of &lt;code&gt;Dynamic&lt;/code&gt;
        invokes the &lt;code&gt;dynamically&lt;wbr&gt;&lt;/wbr&gt;Call(with&lt;wbr&gt;&lt;/wbr&gt;Arguments:)&lt;/code&gt; method,
        passing an array of arguments
        and &lt;code&gt;Dynamic&lt;/code&gt; as an implicit &lt;code&gt;self&lt;/code&gt; argument.&lt;/dd&gt;
        &lt;dt&gt;‚ù∑&lt;/dt&gt;
        &lt;dd&gt;Calling an instance of &lt;code&gt;Dynamic&lt;/code&gt;
        with at least one labeled argument
        invokes the &lt;code&gt;dynamically&lt;wbr&gt;&lt;/wbr&gt;Call(with&lt;wbr&gt;&lt;/wbr&gt;Keyword&lt;wbr&gt;&lt;/wbr&gt;Arguments:)&lt;/code&gt; method,
        passing the arguments in a &lt;a href=&quot;/keyvaluepairs/&quot;&gt;&lt;code&gt;Key&lt;wbr&gt;&lt;/wbr&gt;Value&lt;wbr&gt;&lt;/wbr&gt;Pairs&lt;/code&gt; object&lt;/a&gt;
        and &lt;code&gt;Dynamic&lt;/code&gt; as an implicit &lt;code&gt;self&lt;/code&gt; argument.&lt;/dd&gt;
        &lt;dt&gt;‚ù∏&lt;/dt&gt;
        &lt;dd&gt;Calling &lt;code&gt;function&lt;/code&gt; on the &lt;code&gt;Dynamic&lt;/code&gt; type
        invokes the static &lt;code&gt;dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;/code&gt; subscript,
        passing &lt;code&gt;&quot;function&quot;&lt;/code&gt; as the key;
        here, we call the returned anonymous closure.&lt;/dd&gt;
        &lt;dt&gt;‚ùπ&lt;/dt&gt;
        &lt;dd&gt;Calling &lt;code&gt;function&lt;/code&gt; on an instance of &lt;code&gt;Dynamic&lt;/code&gt;
        invokes the &lt;code&gt;dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;/code&gt; subscript,
        passing &lt;code&gt;&quot;function&quot;&lt;/code&gt; as the key;
        here, we call the returned anonymous closure.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;h4&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;dynamism-by-declaration-attributes&quot; href=&quot;#dynamism-by-declaration-attributes&quot;&gt;&lt;/a&gt;Dynamism by Declaration Attributes&lt;/h4&gt;
        &lt;p&gt;&lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Callable&lt;/code&gt; and &lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/code&gt;
        are declaration attributes,
        which means that they can‚Äôt be applied to existing declarations
        through an extension.&lt;/p&gt;
        &lt;p&gt;So you can‚Äôt, for example,
        &lt;em&gt;spice up&lt;/em&gt; &lt;code&gt;Int&lt;/code&gt; with &lt;a href=&quot;https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/array/access.r&quot; rel=&quot;noopener noreferrer&quot;&gt;Ruby-ish&lt;/a&gt;
        natural language accessors:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ‚ö†Ô∏é Error: '@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup' attribute cannot be applied to this declaration&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replacing&lt;wbr&gt;&lt;/wbr&gt;Occurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;wbr&gt;&lt;/wbr&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;wbr&gt;&lt;/wbr&gt;Style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spell&lt;wbr&gt;&lt;/wbr&gt;Out&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ‚ö†Ô∏é Error: Just to be super clear, this doesn't work&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forty_two&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 42 (hypothetically, if we could apply `@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup` in an extension)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Contrast this with &lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/code&gt;,
        which can be added to any type in an extension.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;For more information about these new language features,
        check out the original Swift Evolution proposals:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md&quot; title='SE-0195: Introduce User-defined \&quot;Dynamic Member Lookup\&quot; Types' rel=&quot;noopener noreferrer&quot;&gt;SE-0195: Introduce User-defined ‚ÄúDynamic Member Lookup‚Äù Types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md&quot; title='SE-0216: Introduce user-defined dynamically \&quot;callable\&quot; types' rel=&quot;noopener noreferrer&quot;&gt;SE-0216: Introduce - user-defined dynamically ‚Äúcallable‚Äù types&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md&quot; title=&quot;SE-0249: Key Path Expressions as Functions&quot; rel=&quot;noopener noreferrer&quot;&gt;SE-0249: Key Path Expressions as Functions&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0252-keypath-dynamic-member-lookup.md&quot; title=&quot;SE-0252: Key Path Member Lookup&quot; rel=&quot;noopener noreferrer&quot;&gt;SE-0252: Key - Path Member Lookup&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md&quot; title=&quot;SE-0253: Callable values of user-defined nominal types&quot; rel=&quot;noopener noreferrer&quot;&gt;SE-0253: Callable values of user-defined nominal types&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;There‚Äôs much more to talk about with
        &lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Member&lt;wbr&gt;&lt;/wbr&gt;Lookup&lt;/code&gt;, &lt;code&gt;@dynamic&lt;wbr&gt;&lt;/wbr&gt;Callable&lt;/code&gt;, and &lt;code&gt;call&lt;wbr&gt;&lt;/wbr&gt;As&lt;wbr&gt;&lt;/wbr&gt;Function&lt;/code&gt;,
        and we look forward to covering them all in more detail
        in future articles.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;&lt;em&gt;But speaking of &lt;del&gt;Ruby&lt;/del&gt;&lt;ins&gt;Python&lt;/ins&gt;‚Ä¶&lt;/em&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;swift-_______&quot; href=&quot;#swift-_______&quot;&gt;&lt;/a&gt;Swift ‚®Ø &lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;strong&gt;__&lt;/strong&gt;_&lt;/h2&gt;
        &lt;p&gt;Adding to
        &lt;a href=&quot;/numericcast/&quot;&gt;our list of &lt;em&gt;‚ÄúWhat code is like‚Äù&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Code is like fan fiction.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Sometimes to ship software,
        you need to pair up and ‚Äúship‚Äù different technologies.&lt;/p&gt;
        &lt;aside class=&quot;parenthetical&quot;&gt;
        &lt;p&gt;In a way,
        the story of Swift is one of the great, tragic romances in modern computing;
        how else might we describe the way
        Objective-C sacrificed itself to make Swift possible?&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;In building these features,
        the ‚Äúpowers that be‚Äù have ordained that
        &lt;a href=&quot;https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md&quot; rel=&quot;noopener noreferrer&quot;&gt;Swift replace Python for Machine Learning&lt;/a&gt;.
        Taking for granted that an incremental approach is best,
        the way to make that happen is to allow
        Swift to interoperate with Python
        as seamlessly as it does with Objective-C.
        And since Swift 4.2,
        we‚Äôve been &lt;a href=&quot;https://www.tensorflow.org/swift/tutorials/python_interoperability&quot; rel=&quot;noopener noreferrer&quot;&gt;getting pretty close&lt;/a&gt;.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Python&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;numpy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zeros&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* [[1, 1, 1, 1]
        [1, 1, 1, 1]] */&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;the-externalities-of-dynamism&quot; href=&quot;#the-externalities-of-dynamism&quot;&gt;&lt;/a&gt;The Externalities of Dynamism&lt;/h2&gt;
        &lt;p&gt;The promise of additive changes is that they don‚Äôt change anything
        if you don‚Äôt want them to.
        You can continue to write Swift code
        remaining totally ignorant of the features described in this article
        (most of us have so far).
        But let‚Äôs be clear:
        there are no cost-free abstractions.&lt;/p&gt;
        &lt;p&gt;Economics uses the term &lt;a href=&quot;https://en.wikipedia.org/wiki/Externality&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;dfn&gt;negative externalities&lt;/dfn&gt;&lt;/a&gt;
        to describe indirect costs incurred by a decision.
        Although you don‚Äôt pay for these features unless you use them,
        we all shoulder the burden of a more complex language
        that‚Äôs more difficult to teach, learn, document, and reason about.&lt;/p&gt;
        &lt;hr&gt;
        &lt;p&gt;A lot of us who have been with Swift from the beginning
        have grown weary of Swift Evolution.
        And for those on the outside looking in,
        it‚Äôs unfathomable that we‚Äôre wasting time on inconsequential ‚Äúsugar‚Äù like this
        instead of features that will &lt;em&gt;really&lt;/em&gt; move the needle,
        like &lt;a href=&quot;https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;In isolation,
        each of these proposals is thoughtful and useful ‚Äî &lt;em&gt;genuinely&lt;/em&gt;.
        We‚Äôve already &lt;a href=&quot;https://github.com/NSHipster/DBSCAN&quot; rel=&quot;noopener noreferrer&quot;&gt;had occasion&lt;/a&gt; to use a few of them.
        But it can be really hard to judge things on their own technical merits
        when they‚Äôre steeped in emotional baggage.&lt;/p&gt;
        &lt;p&gt;Everyone has their own sugar tolerance,
        and it‚Äôs often informed by what they‚Äôre accustomed to.
        Being cognizant of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Drawbridge_mentality&quot; rel=&quot;noopener noreferrer&quot;&gt;drawbridge effect&lt;/a&gt;,
        I honestly can‚Äôt tell if I‚Äôm out of touch,
        or if it‚Äôs &lt;a href=&quot;https://knowyourmeme.com/memes/am-i-out-of-touch&quot; rel=&quot;noopener noreferrer&quot;&gt;the children who are wrong&lt;/a&gt;‚Ä¶&lt;/p&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; integrity=&quot;sha256-CfAtN3AgDvIyWYPoKwf2ZO5voLkCKS1CYc2uShnvQaw=&quot; crossorigin=&quot;anonymous&quot; href=&quot;/assets/articles/callable-09f02d3770200ef2325983e82b07f664ee6fa0b902292d4261cdae4a19ef41ac.css&quot;&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Swift" />
      <summary type="html">&lt;p&gt;If like most of us, you aren‚Äôt tuned into the comings-and-goings of Swift Evolution, Xcode 11.4 is your first exposure to two new additions to the language: key path expressions as functions and callable values of user-defined nominal types.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">RawRepresentable</title>
      <link href="https://nshipster.com/rawrepresentable/" rel="alternate" type="text/html" title="RawRepresentable" />
      <published>2020-01-29T00:00:00-08:00</published>
      <updated>2020-01-29T00:00:00-08:00</updated>
      <id>https://nshipster.com/rawrepresentable</id>
      <content type="html" xml:base="https://nshipster.com/rawrepresentable/">
        &lt;p&gt;Programming is about typing.
        And programming languages are typically judged by how much they make you type ‚Äî
        in both senses of the word.&lt;/p&gt;
        &lt;p&gt;Swift is beloved for being able to save us a few keystrokes
        without compromising safety or performance,
        whether it‚Äôs through
        implicit typing or
        automatic synthesis of protocols like
        &lt;a href=&quot;/equatable-and-comparable/&quot;&gt;&lt;code&gt;Equatable&lt;/code&gt;&lt;/a&gt; and
        &lt;a href=&quot;/hashable/&quot;&gt;&lt;code&gt;Hashable&lt;/code&gt;&lt;/a&gt;.
        But the &lt;abbr title=&quot;Ice-T's 1991 single 'O.G. Original Gangster'&quot;&gt;OG&lt;/abbr&gt;
        ergonomic feature of Swift is undoubtedly
        automatic synthesis of &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; conformance
        for enumerations with raw types.
        You know‚Ä¶
        the language feature that lets you do this:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goodbye&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implicit raw value of &quot;goodbye&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sort&lt;wbr&gt;&lt;/wbr&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ascending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implicit raw value of 0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descending&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// implicit raw value of 1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Though &lt;em&gt;‚Äúenum + RawValue‚Äù&lt;/em&gt; has been carved into the oak tree of our hearts
        since first we laid eyes on that language with a fast bird,
        few of us have had occasion to consider
        what &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; means outside of autosynthesis.
        This week,
        we invite you to do a little extra typing
        and explore some untypical use cases for the &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; protocol.&lt;/p&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;In Swift,
        an enumeration can be declared with
        &lt;dfn&gt;raw value syntax&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;According to &lt;a href=&quot;https://developer.apple.com/documentation/swift/rawrepresentable&quot; rel=&quot;noopener noreferrer&quot;&gt;the documentation&lt;/a&gt;:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;For any enumeration with a string, integer, or floating-point raw type,
        the Swift compiler automatically adds &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; conformance.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;When developers first start working with Swift,
        they inevitably run into situations where raw value syntax doesn‚Äôt work:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Enumerations with raw values other than &lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;
        &lt;/li&gt;
        &lt;li&gt;Enumerations with associated values&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Upon seeing those bright, red error sigils,
        many of us fall back to a more conventional enumeration,
        failing to realize that what we wanted to do wasn‚Äôt impossible,
        but rather just slightly beyond what the compiler can do for us.&lt;/p&gt;
        &lt;hr&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;rawrepresentable-with-c-raw-value-types&quot; href=&quot;#rawrepresentable-with-c-raw-value-types&quot;&gt;&lt;/a&gt;RawRepresentable with C Raw Value Types&lt;/h2&gt;
        &lt;p&gt;The primary motivation for raw value enumerations is 
        to improve interoperability.
        Quoting again from the docs:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;Using the raw value of a conforming type
        streamlines interoperation with Objective-C and legacy APIs.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;This is true of Objective-C frameworks in the Apple SDK,
        which declare enumerations with &lt;a href=&quot;/ns_enum-ns_options/&quot;&gt;&lt;code&gt;NS_ENUM&lt;/code&gt;&lt;/a&gt;.
        But interoperability with other C libraries is often less seamless.&lt;/p&gt;
        &lt;p&gt;Consider the task of interfacing with 
        &lt;a href=&quot;https://github.com/commonmark/cmark&quot; rel=&quot;noopener noreferrer&quot;&gt;libcmark&lt;/a&gt;,
        a library for working with Markdown according to the
        &lt;a href=&quot;http://spec.commonmark.org/&quot; rel=&quot;noopener noreferrer&quot;&gt;CommonMark spec&lt;/a&gt;.
        Among the imported data types is &lt;code&gt;cmark_node_type&lt;/code&gt;,
        which has the following C declaration:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Error status */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Block */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_DOCUMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_BLOCK_QUOTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_HEADING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_THEMATIC_BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_FIRST_BLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMARK_NODE_DOCUMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CMARK_NODE_LAST_BLOCK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CMARK_NODE_THEMATIC_BREAK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmark_node_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;We can immediately see a few details that would need to be ironed out
        along the path of Swiftification ‚Äî
        notably, 
        1) the sentinel &lt;code&gt;NONE&lt;/code&gt; value, which would instead be represented by &lt;code&gt;nil&lt;/code&gt;, and
        2) the aliases for the first and last block values,
        which wouldn‚Äôt be encoded by distinct enumeration cases.&lt;/p&gt;
        &lt;p&gt;Attempting to declare a Swift enumeration
        with a raw value type of &lt;code&gt;cmark_node_type&lt;/code&gt; results in a compiler error.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;wbr&gt;&lt;/wbr&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmark_node_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;However, 
        that doesn‚Äôt totally rule out &lt;code&gt;cmark_node_type&lt;/code&gt; from being a &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/code&gt; type.
        Here‚Äôs what we need to make that happen:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;wbr&gt;&lt;/wbr&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;wbr&gt;&lt;/wbr&gt;Quote&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmark_node_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMARK_NODE_DOCUMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMARK_NODE_BLOCK_QUOTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;wbr&gt;&lt;/wbr&gt;Quote&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmark_node_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMARK_NODE_DOCUMENT&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block&lt;wbr&gt;&lt;/wbr&gt;Quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CMARK_NODE_BLOCK_QUOTE&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;It‚Äôs a far cry from being able to say &lt;code&gt;case document = CMARK_NODE_DOCUMENT&lt;/code&gt;,
        but this approach offers a reasonable solution
        that falls within the existing semantics of the Swift standard library.&lt;/p&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;You can omit a protocol‚Äôs associated type requirement
        if the type can be determined from the protocol‚Äôs other requirements.&lt;/p&gt;
        &lt;p&gt;For instance,
        the &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; protocol requires 
        a &lt;code&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/code&gt; property that returns a value of the associated &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/code&gt; type;
        a conforming type can implicitly satisfy the associated type requirement
        by declaring its property requirement with a concrete type
        (in the example above, &lt;code&gt;cmark_node_type&lt;/code&gt;).&lt;/p&gt;
        &lt;/aside&gt;
        &lt;p&gt;That debunks the myth about
        &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; being the only types that can be a raw value.
        What about that one about associated values?&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;rawrepresentable-and-associated-values&quot; href=&quot;#rawrepresentable-and-associated-values&quot;&gt;&lt;/a&gt;RawRepresentable and Associated Values&lt;/h2&gt;
        &lt;p&gt;In Swift,
        an enumeration case can have one or more &lt;dfn&gt;associated values&lt;/dfn&gt;.
        Associated values are a convenient way to introduce some flexibility
        into the closed semantics of enumerations
        and all the benefits they confer.&lt;/p&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/Driver.md#output-file-maps&quot; rel=&quot;noopener noreferrer&quot;&gt;As the old adage goes&lt;/a&gt;:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;There are three numbers in computer science: 0, 1, and N.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Because of the associated value on &lt;code&gt;n&lt;/code&gt;,
        the compiler can‚Äôt automatically synthesize an &lt;code&gt;Int&lt;/code&gt; raw value type.
        But that doesn‚Äôt mean we can‚Äôt roll up our sleeves and pick up the slack.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .one&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Another myth busted!&lt;/p&gt;
        &lt;p&gt;Let‚Äôs continue this example to clear up 
        a misconception we found in the documentation.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;rawrepresentable-as-raw-values-for-another-enumeration&quot; href=&quot;#rawrepresentable-as-raw-values-for-another-enumeration&quot;&gt;&lt;/a&gt;RawRepresentable as Raw Values for Another Enumeration&lt;/h2&gt;
        &lt;p&gt;Consider the following from 
        the &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; docs:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;For any enumeration with a string, integer, or floating-point raw type,
        the Swift compiler automatically adds &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; conformance.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;This is, strictly speaking, true.
        But it actually under-sells what the compiler can do.
        The actual requirements for raw values are as follows:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;The raw value type must be &lt;code&gt;Equatable&lt;/code&gt;
        &lt;/li&gt;
        &lt;li&gt;The raw value type must be
        &lt;code&gt;Expressible&lt;wbr&gt;&lt;/wbr&gt;By&lt;wbr&gt;&lt;/wbr&gt;Integer&lt;wbr&gt;&lt;/wbr&gt;Literal&lt;/code&gt;,
        &lt;code&gt;Expressible&lt;wbr&gt;&lt;/wbr&gt;By&lt;wbr&gt;&lt;/wbr&gt;Float&lt;wbr&gt;&lt;/wbr&gt;Literal&lt;/code&gt;, or
        &lt;code&gt;Expressible&lt;wbr&gt;&lt;/wbr&gt;By&lt;wbr&gt;&lt;/wbr&gt;String&lt;wbr&gt;&lt;/wbr&gt;Literal&lt;/code&gt;
        &lt;/li&gt;
        &lt;li&gt;The raw value for each enumeration case must be a literal
        (or unspecified, in which case the value is inferred)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Let‚Äôs see what happens if we satisfy that for our &lt;code&gt;Number&lt;/code&gt; type from before.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// conformance is automatically synthesized&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expressible&lt;wbr&gt;&lt;/wbr&gt;By&lt;wbr&gt;&lt;/wbr&gt;Integer&lt;wbr&gt;&lt;/wbr&gt;Literal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;wbr&gt;&lt;/wbr&gt;Literal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .n(-1)&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .zero&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .one&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .n(2)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;If we declare a new enumeration,
        &lt;code lang=&quot;zh-Hans&quot;&gt;Êï∞&lt;/code&gt;
        (literally ‚ÄúNumber‚Äù)
        with a &lt;code&gt;Number&lt;/code&gt; raw value‚Ä¶&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;‰∏Ä&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;‰∫å&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;‰∏â&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∫å&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ‰∫å&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∫å&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .n(2)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∫å&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;&lt;em&gt;Wait, that actually works? Neat!&lt;/em&gt;&lt;/p&gt;
        &lt;p&gt;What‚Äôs really interesting is that our contrived little enumeration type
        benefits from the same, small memory footprint
        that you get from using enumerations in more typical capacities:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Memory&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∏â&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 (bytes)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Memory&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∏â&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 9 (bytes)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Memory&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Êï∞&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;‰∏â&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8 (bytes)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;If raw values aren‚Äôt limited to &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Int&lt;/code&gt;,
        as once believed,
        you may start to wonder:
        &lt;em&gt;How far can we take this?&lt;/em&gt;&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;rawrepresentable-with-metatype-raw-values&quot; href=&quot;#rawrepresentable-with-metatype-raw-values&quot;&gt;&lt;/a&gt;RawRepresentable with Metatype Raw Values&lt;/h2&gt;
        &lt;p&gt;Probably the biggest selling point of enumerations in Swift
        is how they encode a closed set of values.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;water&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fire&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Unfortunately,
        there‚Äôs no equivalent way to ‚Äúclose off‚Äù which types conform to a protocol.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Water&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Without built-in support for type unions 
        or an analog to the &lt;code&gt;open&lt;/code&gt; access modifier for classes,
        there‚Äôs nothing that an API provider can do,
        for example,
        to prevent a consumer from doing the following:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Aether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Any switch statement over a type-erased &lt;code&gt;Elemental&lt;/code&gt; value
        using &lt;code&gt;is&lt;/code&gt; checks will necessarily have a &lt;code&gt;default&lt;/code&gt; case.&lt;/p&gt;
        &lt;p&gt;Until we have a first-class language feature for providing such guarantees,
        we can recruit enumerations and raw values for a reasonable approximation:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earth&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Water&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;water&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Air&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;air&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fire&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Elemental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;earth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Earth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;water&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Water&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;air&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Air&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;This doesn‚Äôt work for protocols with an associated type requirement.
        Sorry to disappoint anyone looking for an easy workaround for
        &lt;em&gt;‚ÄúProtocol can only be used as a generic constraint
        because it has Self or associated type requirements‚Äù&lt;/em&gt;&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;Returning one last time to the docs,
        we‚Äôre reminded that:&lt;/p&gt;
        &lt;blockquote&gt;
        &lt;p&gt;With a &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; type, 
        you can switch back and forth between 
        a custom type and an associated &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/code&gt; type 
        without losing the value of the original &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; type.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;From the earliest days of the language, 
        &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; has been relegated to 
        the thankless task of C interoperability.
        But looking now with a fresh set of eyes,
        we can now see it for in all its 
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Injective_function&quot; rel=&quot;noopener noreferrer&quot;&gt;injective&lt;/a&gt; glory.&lt;/p&gt;
        &lt;p&gt;So the next time you find yourself with an enumeration
        whose cases broker in discrete, defined counterparts,
        consider adopting &lt;code&gt;Raw&lt;wbr&gt;&lt;/wbr&gt;Representable&lt;/code&gt; to formalize the connection.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Swift" />
      <summary type="html">&lt;p&gt;Programming is about typing. And programming languages are typically judged by how much they make you type ‚Äî in both senses of the word.&lt;/p&gt;</summary>
    </entry>
    <entry>
      <title type="html">@</title>
      <link href="https://nshipster.com/at-compiler-directives/" rel="alternate" type="text/html" title="@" />
      <published>2020-01-06T00:00:00-08:00</published>
      <updated>2020-01-06T00:00:00-08:00</updated>
      <id>https://nshipster.com/at-compiler-directives</id>
      <content type="html" xml:base="https://nshipster.com/at-compiler-directives/">
        &lt;p&gt;Birdwatchers refer to it as 
        &lt;em&gt;(and I swear I‚Äôm not making this up)&lt;/em&gt; 
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Jizz_%28birding%29&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;dfn&gt;‚ÄúJizz‚Äù&lt;/dfn&gt;&lt;/a&gt;:
        the general characteristics that form an overall impression of a thing.&lt;/p&gt;
        &lt;p&gt;Walking through the forests of the Pacific Northwest,
        a birder would know a nighthawk from other little brown jobs
        from its distinct vocalization,
        or a grey-cheeked thrush by its white-dark-white underwing pattern.
        Looking up in the sky,
        there‚Äôd be no mistaking a Flying-V formation of migratory geese
        from the undulating murmuration of starlings.
        And while a twitcher would be forgiven for
        mistaking a coot for a duck at the water‚Äôs edge,
        their scaley, non-webbed feet are an obvious tell to an ornithophile.&lt;/p&gt;
        &lt;p&gt;The usefulness of jizz isn‚Äôt limited to amateur ornithology, either.
        We can distinguish varieties of programming languages
        based on their defining characteristics:
        Go with its tell-tale couplets of &lt;code&gt;if err&lt;/code&gt;,
        Rust with its unpronounceable, consonant-laden keywords, &lt;code&gt;pub&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;, and &lt;code&gt;mut&lt;/code&gt;,
        Perl with its special characters that read like Q*bert swearing.
        Lisp‚Äôs profusion of parentheses is an old clich√© at this point;
        our favorite telling is 
        &lt;a href=&quot;https://discuss.fogcreek.com/joelonsoftware3/default.asp?cmd=show&amp;amp;ixPost=94232&amp;amp;ixReplies=38&quot; rel=&quot;noopener noreferrer&quot;&gt;that one joke&lt;/a&gt; 
        about the stolen last page of a Lisp program‚Äôs printed source code.&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Lisp&quot;&gt;&lt;code&gt;                &lt;span class=&quot;err&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)))))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;hr&gt;&lt;a id=&quot;get-on-with-it&quot;&gt;&lt;/a&gt;
        &lt;p&gt;If we were to go code-watching for the elusive Objective-C species, 
        what would we look for?
        Square brackets,
        ridiculously long method names,
        and &lt;code&gt;@&lt;/code&gt;‚Äôs.&lt;/p&gt;
        &lt;p&gt;&lt;code&gt;@&lt;/code&gt;, or ‚Äúat‚Äù sign compiler directives, 
        are as central to understanding Objective-C‚Äôs gestalt 
        as its ancestry and underlying mechanisms. 
        Those little cinnamon roll glyphs are the sugary glue 
        that allows Objective-C to be such a powerful, expressive language, 
        and yet still compile down to C.
        So varied and disparate are its uses that 
        the only accurate way to describe what &lt;code&gt;@&lt;/code&gt; means on its own is 
        &lt;em&gt;‚Äúshorthand for something to do with Objective-C‚Äù&lt;/em&gt;. 
        They cover a broad range in usefulness and obscurity,
        from staples like &lt;code&gt;@interface&lt;/code&gt; and &lt;code&gt;@implementation&lt;/code&gt; 
        to ones you could go your whole career without spotting, 
        like &lt;code&gt;@defs&lt;/code&gt; and &lt;code&gt;@compatibility_alias&lt;/code&gt;.
        But to anyone aspiring to be an NSHipster, 
        knowledge of every &lt;code&gt;@&lt;/code&gt; directives 
        is tantamount to a birder‚Äôs familiarity with
        the frenetic hovering of a hummingbird,
        the commanding top knot of a Mountain quail, or
        the eponymous ‚Äúcuckoo‚Äù of &lt;em&gt;Coccyzus americanus&lt;/em&gt;.&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;interface-implementation&quot; href=&quot;#interface-implementation&quot;&gt;&lt;/a&gt;Interface &amp;amp; Implementation&lt;/h2&gt;
        &lt;p&gt;&lt;code&gt;@interface&lt;/code&gt; and &lt;code&gt;@implementation&lt;/code&gt; are the first things you encounter 
        when you start learning Objective-C:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// My&lt;wbr&gt;&lt;/wbr&gt;Object.h&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// My&lt;wbr&gt;&lt;/wbr&gt;Object.m&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;What you don‚Äôt learn about until later on are categories and class extensions.&lt;/p&gt;
        &lt;p&gt;Categories allow you to extend the behavior of existing classes 
        by adding new class or instance methods. 
        As a convention, 
        categories are defined in their own &lt;code&gt;.{h,m}&lt;/code&gt; files:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// My&lt;wbr&gt;&lt;/wbr&gt;Object+Category&lt;wbr&gt;&lt;/wbr&gt;Name.h&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Category&lt;wbr&gt;&lt;/wbr&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// My&lt;wbr&gt;&lt;/wbr&gt;Object+Category&lt;wbr&gt;&lt;/wbr&gt;Name.m&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Category&lt;wbr&gt;&lt;/wbr&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Categories are particularly useful for convenience methods on standard framework classes 
        &lt;em&gt;(just don‚Äôt go overboard with your utility functions)&lt;/em&gt;.&lt;/p&gt;
        &lt;p&gt;Extensions look like categories
        but omit the category name. 
        They‚Äôre typically declared before an &lt;code&gt;@implementation&lt;/code&gt; 
        to specify a private interface
        or override properties declared in the public interface:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// My&lt;wbr&gt;&lt;/wbr&gt;Object.m&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;wbr&gt;&lt;/wbr&gt;Private&lt;wbr&gt;&lt;/wbr&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;My&lt;wbr&gt;&lt;/wbr&gt;Object&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;properties&quot; href=&quot;#properties&quot;&gt;&lt;/a&gt;Properties&lt;/h3&gt;
        &lt;p&gt;Property directives are likewise, 
        learned early on:&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@property&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Declares a class or instance property.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@synthesize&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Automatically synthesizes getter / setter methods 
        to an underlying instance or class variable 
        for a declared property.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@dynamic&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Instructs the compiler that you‚Äôll provide your own 
        implementation for property getter and/or setter methods.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;All &lt;code&gt;@property&lt;/code&gt; declarations are now automatically synthesized by default
        (since Xcode 4.4),
        so you‚Äôre much less likely to find &lt;code&gt;@synthesize&lt;/code&gt; in Objective-C code bases these days.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;property-attributes&quot; href=&quot;#property-attributes&quot;&gt;&lt;/a&gt;Property Attributes&lt;/h3&gt;
        &lt;p&gt;&lt;code&gt;@property&lt;/code&gt; declarations comprise their own little sub-phylum of syntax,
        with attributes for specifying:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Accessor names 
        (&lt;code&gt;getter&lt;/code&gt; / &lt;code&gt;setter&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;Access types
        (&lt;code&gt;readwrite&lt;/code&gt; / &lt;code&gt;readonly&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;
        &lt;a href=&quot;https://en.wikipedia.org/wiki/Linearizability&quot; rel=&quot;noopener noreferrer&quot;&gt;Atomicity&lt;/a&gt; 
        (&lt;code&gt;atomic&lt;/code&gt; / &lt;code&gt;nonatomic&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;
        &lt;a href=&quot;https://clang.llvm.org/docs/analyzer/developer-docs/nullability.html&quot; rel=&quot;noopener noreferrer&quot;&gt;Nullability&lt;/a&gt;
        (&lt;code&gt;nullable&lt;/code&gt; / &lt;code&gt;nonnullable&lt;/code&gt; / &lt;code&gt;null_resettable&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;
        &lt;a href=&quot;https://clang.llvm.org/docs/AutomaticReferenceCounting.html#ownership-qualification&quot; rel=&quot;noopener noreferrer&quot;&gt;Ownership&lt;/a&gt;
        (&lt;code&gt;weak&lt;/code&gt; / &lt;code&gt;strong&lt;/code&gt; / &lt;code&gt;copy&lt;/code&gt; / &lt;code&gt;retain&lt;/code&gt; / &lt;code&gt;assign&lt;/code&gt; / &lt;code&gt;unsafe_unretained&lt;/code&gt;)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;And that‚Äôs not all ‚Äî
        there‚Äôs also the &lt;code&gt;class&lt;/code&gt; attribute,
        which lets you declare a class property using 
        the same, familiar instance property syntax,
        as well as &lt;a href=&quot;/direct/&quot;&gt;the forthcoming &lt;code&gt;direct&lt;/code&gt; attribute&lt;/a&gt;,
        which will let you opt in to direct method dispatch.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;forward-class-declarations&quot; href=&quot;#forward-class-declarations&quot;&gt;&lt;/a&gt;Forward Class Declarations&lt;/h3&gt;
        &lt;p&gt;Occasionally,
        &lt;code&gt;@interface&lt;/code&gt; declarations will reference an external type in a property or as a parameter. 
        Rather than adding an &lt;code&gt;#import&lt;/code&gt; statement in the interface, 
        you can use a forward class declaration in the header
        and import the necessary in the implementation.&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@class&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Creates a forward declaration,
        allowing a class to be referenced before its actual declaration.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;p&gt;Shorter compile times, 
        less chance of cyclical references; 
        you should get in the habit of doing this if you aren‚Äôt already.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;instance-variable-visibility&quot; href=&quot;#instance-variable-visibility&quot;&gt;&lt;/a&gt;Instance Variable Visibility&lt;/h3&gt;
        &lt;p&gt;It‚Äôs a matter of general convention that 
        classes provide state and mutating interfaces through properties and methods, 
        rather than directly exposing ivars.
        Nonetheless, 
        in cases where ivars &lt;em&gt;are&lt;/em&gt; directly manipulated, 
        there are the following visibility directives:&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@public&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Instance variable can be read and written to directly
        using the following notation:&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ivar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@package&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Instance variable is public, 
        except outside of the framework in which it is specified 
        (64-bit architectures only)&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@protected&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Instance variable is only accessible to its class and derived classes&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@private&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Instance variable is only accessible to its class&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@public&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@private&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;protocols&quot; href=&quot;#protocols&quot;&gt;&lt;/a&gt;Protocols&lt;/h2&gt;
        &lt;p&gt;There‚Äôs a distinct point early in an Objective-C programmer‚Äôs evolution
        when they realize that they can define their own protocols.&lt;/p&gt;
        &lt;p&gt;The beauty of protocols is that they let you design contracts 
        that can be adopted outside of a class hierarchy. 
        It‚Äôs the egalitarian mantra at the heart of the American Dream: 
        It doesn‚Äôt matter who you are or where you come from; 
        anyone can achieve anything if they work hard enough.&lt;/p&gt;
        &lt;p&gt;&lt;code&gt;@protocol&lt;/code&gt;‚Ä¶&lt;code&gt;@end&lt;/code&gt;
        defines a set of methods to be implemented by any conforming class, 
        as if they were added to the interface of that class directly.&lt;/p&gt;
        &lt;p&gt;Architectural stability and expressiveness without the burden of coupling?
        Protocols are awesome.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;requirement-options&quot; href=&quot;#requirement-options&quot;&gt;&lt;/a&gt;Requirement Options&lt;/h3&gt;
        &lt;p&gt;You can further tailor a protocol by specifying methods as required or optional. 
        Optional methods are stubbed in the interface, 
        so as to be auto-completed in Xcode, 
        but do not generate a warning if the method isn‚Äôt implemented. 
        Protocol methods are required by default.&lt;/p&gt;
        &lt;p&gt;The syntax for &lt;code&gt;@required&lt;/code&gt; and &lt;code&gt;@optional&lt;/code&gt; follows that of the visibility macros:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Custom&lt;wbr&gt;&lt;/wbr&gt;Control&lt;wbr&gt;&lt;/wbr&gt;Delegate&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Custom&lt;wbr&gt;&lt;/wbr&gt;Control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;did&lt;wbr&gt;&lt;/wbr&gt;Succeed&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@optional&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Custom&lt;wbr&gt;&lt;/wbr&gt;Control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;did&lt;wbr&gt;&lt;/wbr&gt;Fail&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;exception-handling&quot; href=&quot;#exception-handling&quot;&gt;&lt;/a&gt;Exception Handling&lt;/h2&gt;
        &lt;p&gt;Objective-C communicates unexpected state primarily through &lt;code&gt;NSError&lt;/code&gt;. 
        Whereas other languages would use exception handling for this, 
        Objective-C relegates exceptions to truly exceptional behavior.&lt;/p&gt;
        &lt;p&gt;&lt;code&gt;@&lt;/code&gt; directives are used for the traditional convention of &lt;code&gt;try/catch/finally&lt;/code&gt; blocks:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// attempt to execute the following statements&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;wbr&gt;&lt;/wbr&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// if an exception is raised, or explicitly thrown...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// always executed after @try or @catch&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;literals&quot; href=&quot;#literals&quot;&gt;&lt;/a&gt;Literals&lt;/h2&gt;
        &lt;p&gt;Literals are shorthand notation for specifying fixed values,
        and their availability in a language 
        is directly correlated with programmer happiness. 
        By that measure, 
        Objective-C has long been a language of programmer misery.&lt;/p&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;object-literals&quot; href=&quot;#object-literals&quot;&gt;&lt;/a&gt;Object Literals&lt;/h3&gt;
        &lt;p&gt;For years, 
        Objective-C only had literals for &lt;code&gt;NSString&lt;/code&gt; values.
        But with the release of the 
        &lt;a href=&quot;http://clang.llvm.org/docs/ObjectiveCLiterals.html&quot; rel=&quot;noopener noreferrer&quot;&gt;Apple LLVM 4.0 compiler&lt;/a&gt;, 
        there are now literals for &lt;code&gt;NSNumber&lt;/code&gt;, &lt;code&gt;NSArray&lt;/code&gt;, and &lt;code&gt;NSDictionary&lt;/code&gt;.&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@&quot;&quot;&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;An &lt;code&gt;NSString&lt;/code&gt; object initialized with 
        the text inside the quotation marks.&lt;/dd&gt;
        &lt;dt&gt;
        &lt;code&gt;@42&lt;/code&gt; / &lt;code&gt;@3.14&lt;/code&gt; / &lt;code&gt;@YES&lt;/code&gt; / &lt;code&gt;@'Z'&lt;/code&gt;
        &lt;/dt&gt;
        &lt;dd&gt;An &lt;code&gt;NSNumber&lt;/code&gt; object initialized with 
        the adjacent value using the pertinent class constructor, 
        such that 
        &lt;code&gt;@42&lt;/code&gt; ‚Üí &lt;code&gt;[NSNumber number&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Integer:42]&lt;/code&gt; and 
        &lt;code&gt;@YES&lt;/code&gt; ‚Üí &lt;code&gt;[NSNumber number&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Bool:YES]&lt;/code&gt;. 
        &lt;em&gt;(You can use suffixes to further specify type, 
        like &lt;code&gt;@42U&lt;/code&gt; ‚Üí &lt;code&gt;[NSNumber number&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Unsigned&lt;wbr&gt;&lt;/wbr&gt;Int:42U]&lt;/code&gt;)&lt;/em&gt;
        &lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@[]&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;An &lt;code&gt;NSArray&lt;/code&gt; object initialized with 
        a comma-delimited list of objects as its contents. 
        It uses the &lt;code&gt;+array&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Objects:count:&lt;/code&gt; class constructor method, 
        which is a more precise alternative to the more familiar 
        &lt;code&gt;+array&lt;wbr&gt;&lt;/wbr&gt;With&lt;wbr&gt;&lt;/wbr&gt;Objects:&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@{}&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;An &lt;code&gt;NSDictionary&lt;/code&gt; object initialized with key-value pairs as its contents 
        using the format: &lt;code&gt;@{@&quot;some&lt;wbr&gt;&lt;/wbr&gt;Key&quot; : @&quot;the&lt;wbr&gt;&lt;/wbr&gt;Value&quot;}&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@()&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;A boxed expression using the appropriate object literal for the enclosed value 
        &lt;em&gt;(for example, &lt;code&gt;NSString&lt;/code&gt; for &lt;code&gt;const char*&lt;/code&gt;, 
        &lt;code&gt;NSNumber&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, and so on)&lt;/em&gt;. 
        This is also the designated way to use number literals with &lt;code&gt;enum&lt;/code&gt; values.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;objective-c-literals&quot; href=&quot;#objective-c-literals&quot;&gt;&lt;/a&gt;Objective-C Literals&lt;/h3&gt;
        &lt;p&gt;Selectors and protocols can be passed as method parameters.
        &lt;code&gt;@selector()&lt;/code&gt; and &lt;code&gt;@protocol()&lt;/code&gt; serve as pseudo-literal directives 
        that return a pointer to a particular selector (&lt;code&gt;SEL&lt;/code&gt;) or protocol (&lt;code&gt;Protocol *&lt;/code&gt;).&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@selector()&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Provides an &lt;code&gt;SEL&lt;/code&gt; pointer to a selector with the specified name. 
        Used in methods like &lt;code&gt;-perform&lt;wbr&gt;&lt;/wbr&gt;Selector:with&lt;wbr&gt;&lt;/wbr&gt;Object:&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@protocol()&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Provides a &lt;code&gt;Protocol *&lt;/code&gt; pointer to the protocol with the specified name. 
        Used in methods like &lt;code&gt;-conforms&lt;wbr&gt;&lt;/wbr&gt;To&lt;wbr&gt;&lt;/wbr&gt;Protocol:&lt;/code&gt;.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;h3&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;c-literals&quot; href=&quot;#c-literals&quot;&gt;&lt;/a&gt;C Literals&lt;/h3&gt;
        &lt;p&gt;Literals can also work the other way around, 
        transforming Objective-C objects into C values. 
        These directives in particular allow us to peek underneath the Objective-C veil 
        to see what‚Äôs really going on.&lt;/p&gt;
        &lt;p&gt;Did you know that all Objective-C classes and objects are just glorified &lt;code&gt;struct&lt;/code&gt;s? 
        Or that the entire identity of an object hinges on a single &lt;code&gt;isa&lt;/code&gt; field in that &lt;code&gt;struct&lt;/code&gt;?&lt;/p&gt;
        &lt;p&gt;For most of us, 
        most of the time, 
        this is an academic exercise. 
        But for anyone venturing into low-level optimizations, 
        this is simply the jumping-off point.&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@encode()&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Provides the &lt;a href=&quot;/type-encodings/&quot;&gt;type encoding&lt;/a&gt; of a type.
        This value can be used as the first argument in 
        &lt;code&gt;NSCoder -encode&lt;wbr&gt;&lt;/wbr&gt;Value&lt;wbr&gt;&lt;/wbr&gt;Of&lt;wbr&gt;&lt;/wbr&gt;Obj&lt;wbr&gt;&lt;/wbr&gt;CType:at:&lt;/code&gt;.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@defs()&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Provides the layout of an Objective-C class. 
        For example, 
        &lt;code&gt;struct { @defs(NSObject) }&lt;/code&gt; 
        declares a struct with the same fields as an &lt;code&gt;NSObject&lt;/code&gt;:&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;aside class=&quot;admonition warning&quot;&gt;
        &lt;p&gt;&lt;code&gt;@defs&lt;/code&gt; is unavailable in the modern Objective-C runtime.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;optimizations&quot; href=&quot;#optimizations&quot;&gt;&lt;/a&gt;Optimizations&lt;/h2&gt;
        &lt;p&gt;Some &lt;code&gt;@&lt;/code&gt; compiler directives provide shortcuts for common optimizations.&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@autoreleasepool {&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;}&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;If your code contains a tight loop that creates lots of temporary objects,
        you can use the &lt;code&gt;@autoreleasepool&lt;/code&gt; directive to 
        aggressively deallocate these short-lived, locally-scoped objects.
        &lt;code&gt;@autoreleasepool&lt;/code&gt; replaces and improves upon the old &lt;code&gt;NSAutorelease&lt;wbr&gt;&lt;/wbr&gt;Pool&lt;/code&gt;, 
        which was significantly slower and unavailable with ARC.&lt;/dd&gt;
        &lt;dt&gt;&lt;code&gt;@synchronized(&lt;var class=&quot;placeholder&quot;&gt;object&lt;/var&gt;) {&lt;var class=&quot;placeholder&quot;&gt;‚Ä¶&lt;/var&gt;}&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Guarantees the safe execution of a particular block within a specified context 
        (usually &lt;code&gt;self&lt;/code&gt;). 
        Locking in this way is expensive, however, 
        so for classes aiming for a particular level of thread safety, 
        a dedicated &lt;code&gt;NSLock&lt;/code&gt; property 
        or the use of low-level primitives like GCD
        are preferred.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;compatibility&quot; href=&quot;#compatibility&quot;&gt;&lt;/a&gt;Compatibility&lt;/h2&gt;
        &lt;p&gt;When Apple introduces a new API,
        it‚Äôs typically available for the latest SDK only.
        If you want to start using these APIs in your app
        without dropping backward compatibility,
        you can create a &lt;dfn&gt;compatibility alias&lt;/dfn&gt;.&lt;/p&gt;
        &lt;p&gt;For example,
        back when &lt;a href=&quot;/uicollectionview/&quot;&gt;UICollectionView&lt;/a&gt; was first introduced in iOS 6,
        many developers incorporated a 3rd-party library called
        &lt;a href=&quot;https://github.com/steipete/PSTCollectionView&quot; rel=&quot;noopener noreferrer&quot;&gt;PSTCollectionView&lt;/a&gt;,
        which uses &lt;code&gt;@compatibility_alias&lt;/code&gt; to provide a backwards-compatible, 
        drop-in replacement for &lt;code&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;/code&gt;:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if __IPHONE_OS_VERSION_MAX_ALLOWED &amp;lt; 60000
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Controller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;Reusable&lt;wbr&gt;&lt;/wbr&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;Reusable&lt;wbr&gt;&lt;/wbr&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Flow&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Flow&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@compatibility&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;wbr&gt;&lt;/wbr&gt;Attributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Layout&lt;wbr&gt;&lt;/wbr&gt;Attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Data&lt;wbr&gt;&lt;/wbr&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UICollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSTCollection&lt;wbr&gt;&lt;/wbr&gt;View&lt;wbr&gt;&lt;/wbr&gt;Delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#endif
        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;You can use the same approach today to strategically adopt new APIs in your app,
        alongside the next and final &lt;code&gt;@&lt;/code&gt; compiler directive in this week‚Äôs article:&lt;/p&gt;
        &lt;h2&gt;
        &lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; id=&quot;availability&quot; href=&quot;#availability&quot;&gt;&lt;/a&gt;Availability&lt;/h2&gt;
        &lt;p&gt;Achieving backwards or cross-platform compatibility in your app
        can often feel like a high-wire act.
        If you so much as glance towards an unavailable class or method,
        it could mean curtains for your app.
        That‚Äôs why the new features in Clang 5.0 came as such a relief.
        Now developers have a compiler-provide safety net
        to warn them whenever an unavailable API is referenced
        for one of your supported targets.&lt;/p&gt;
        &lt;dl&gt;
        &lt;dt&gt;&lt;code&gt;@available&lt;/code&gt;&lt;/dt&gt;
        &lt;dd&gt;Use in an &lt;code&gt;if&lt;/code&gt; statement to have the compiler 
        conditionally execute a code path based on the platform availability.&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;p&gt;For example,
        if you wanted to use a &lt;code&gt;fancy&lt;wbr&gt;&lt;/wbr&gt;New&lt;wbr&gt;&lt;/wbr&gt;Method&lt;/code&gt; in the latest version of macOS,
        but provide a fallback for older versions of macOS:&lt;/p&gt;
        &lt;pre class=&quot;highlight&quot; data-lang=&quot;Objective-C&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;wbr&gt;&lt;/wbr&gt;Calculation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mac&lt;wbr&gt;&lt;/wbr&gt;OS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fancy&lt;wbr&gt;&lt;/wbr&gt;New&lt;wbr&gt;&lt;/wbr&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;old&lt;wbr&gt;&lt;/wbr&gt;Reliable&lt;wbr&gt;&lt;/wbr&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;
        &lt;aside class=&quot;admonition info&quot;&gt;
        &lt;p&gt;&lt;code&gt;@available&lt;/code&gt; expressions in Objective-C
        have the same syntax as their &lt;a href=&quot;/available/&quot;&gt;Swift counterpart&lt;/a&gt;, &lt;code&gt;#available&lt;/code&gt;.&lt;/p&gt;
        &lt;/aside&gt;
        &lt;hr&gt;
        &lt;p&gt;Much like the familiar call of a warbler
        or the tell-tale plumage of a peacock,
        the &lt;code&gt;@&lt;/code&gt; sigil plays a central role 
        in establishing Objective-C‚Äôs unique identity.
        It‚Äôs a versatile, power-packed character 
        that embodies the underlying design and mechanisms of the language.
        So be on the lookout for its many faces 
        as you wander through codebases, new or familiar.&lt;/p&gt;
      </content>
      <author>
        <name>Mattt</name>
        <email>mattt@nshipster.com</email>
        <uri>https://nshipster.com/authors/mattt/</uri>
      </author>
      <category term="Objective-C" />
      <category term="nshipster" />
      <summary type="html">&lt;p&gt;If we were to go code-watching for Objective-C, what would we look for? Square brackets, ridiculously long method names, and &lt;code&gt;@&lt;/code&gt;‚Äôs.&lt;/p&gt;</summary>
    </entry>
  </feed>